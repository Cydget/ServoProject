#include "../defaultConfigHolder.h"

#ifndef CONFIG_HOLDER_H
#define CONFIG_HOLDER_H

// replace with gear ratio from motor to output
constexpr float mainEncoderGearRatio{275.0 / 125904.0};

// replace with generated output from systemIdent.py
// vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// config setps
// x 1) disconnect motor from gearbox
// x 2) compile and transfer to servo nr x
// x 3) open MasterCommunication folder in terminal
// x 4) run 'make'
// x 5) run './executable --servoNr x --recOpticalEncoder --output=opticalEncoderData.txt'
// x 6) run './systemIdent.py --opticalEncoderDataFile=opticalEncoderData.txt'
// x 7) copy past new generated ConfigHolder class, from terminal, over old class
// x 8) compile and transfer to servo nr x with new ConfigHolder class
// x 9) run './executable --servoNr x --recSystemIdentData --output=systemIdentData.txt'
// x 10) run './systemIdent.py --opticalEncoderDataFile=opticalEncoderData.txt --systemIdentDataFile=systemIdentData.txt'
// x 11) copy past new generated ConfigHolder class, from terminal, over old class
// x 12) connect motor to gearbox again
// x 13) compile and transfer to servo nr x with new ConfigHolder class
class SetupConfigHolder : public DefaultConfigHolder
{
public:
    static std::unique_ptr<OpticalEncoderHandler> createMainEncoderHandler()
    {
        std::array<uint16_t, 512> aVec = {3445, 3458, 3477, 3484, 3492, 3495, 3506, 3519, 3540, 3567, 3583, 3596, 3604, 3614, 3622, 3631, 3644, 3654, 3664, 3670, 3677, 3683, 3688, 3696, 3703, 3705, 3706, 3705, 3704, 3703, 3700, 3698, 3698, 3699, 3698, 3700, 3699, 3704, 3716, 3724, 3731, 3736, 3742, 3750, 3754, 3757, 3760, 3759, 3758, 3754, 3753, 3752, 3750, 3750, 3752, 3758, 3764, 3768, 3769, 3765, 3761, 3756, 3756, 3761, 3765, 3770, 3774, 3778, 3780, 3776, 3773, 3772, 3776, 3779, 3780, 3780, 3780, 3782, 3787, 3795, 3801, 3804, 3804, 3806, 3808, 3809, 3811, 3811, 3813, 3817, 3820, 3824, 3823, 3821, 3820, 3814, 3809, 3802, 3800, 3800, 3803, 3806, 3800, 3794, 3793, 3793, 3797, 3803, 3809, 3816, 3821, 3825, 3825, 3825, 3827, 3828, 3827, 3824, 3818, 3817, 3816, 3815, 3815, 3817, 3818, 3820, 3819, 3821, 3818, 3816, 3813, 3811, 3808, 3805, 3801, 3796, 3791, 3787, 3784, 3780, 3773, 3772, 3768, 3766, 3765, 3764, 3764, 3763, 3762, 3760, 3760, 3758, 3755, 3749, 3744, 3740, 3740, 3737, 3735, 3729, 3720, 3714, 3709, 3701, 3693, 3686, 3677, 3671, 3666, 3656, 3645, 3641, 3639, 3637, 3633, 3628, 3623, 3620, 3619, 3617, 3612, 3608, 3604, 3597, 3590, 3576, 3565, 3558, 3552, 3548, 3544, 3538, 3535, 3532, 3526, 3519, 3507, 3493, 3470, 3452, 3446, 3440, 3431, 3424, 3416, 3402, 3387, 3368, 3351, 3338, 3332, 3323, 3314, 3305, 3294, 3273, 3254, 3238, 3216, 3196, 3175, 3149, 3127, 3112, 3078, 3062, 3051, 3034, 3016, 2994, 2970, 2954, 2936, 2897, 2857, 2830, 2795, 2756, 2710, 2692, 2665, 2632, 2590, 2565, 2551, 2536, 2512, 2487, 2450, 2420, 2404, 2381, 2358, 2333, 2302, 2275, 2248, 2210, 2184, 2164, 2135, 2108, 2067, 2047, 2018, 2004, 1986, 1970, 1948, 1911, 1885, 1862, 1826, 1798, 1769, 1738, 1715, 1690, 1676, 1656, 1627, 1601, 1585, 1571, 1558, 1538, 1523, 1507, 1494, 1486, 1474, 1453, 1436, 1413, 1401, 1382, 1370, 1358, 1349, 1337, 1325, 1320, 1311, 1298, 1284, 1274, 1266, 1264, 1258, 1251, 1242, 1234, 1223, 1217, 1214, 1208, 1205, 1199, 1194, 1193, 1188, 1190, 1189, 1195, 1198, 1202, 1202, 1206, 1212, 1214, 1216, 1219, 1216, 1213, 1212, 1207, 1204, 1202, 1199, 1188, 1184, 1179, 1176, 1169, 1162, 1151, 1139, 1133, 1128, 1121, 1115, 1111, 1105, 1106, 1105, 1098, 1099, 1098, 1096, 1096, 1092, 1094, 1096, 1102, 1105, 1108, 1111, 1112, 1110, 1110, 1109, 1112, 1116, 1116, 1116, 1120, 1122, 1126, 1127, 1128, 1131, 1134, 1137, 1142, 1150, 1153, 1162, 1167, 1179, 1184, 1192, 1201, 1206, 1215, 1225, 1229, 1234, 1244, 1247, 1260, 1267, 1278, 1294, 1307, 1316, 1326, 1335, 1346, 1356, 1372, 1380, 1392, 1406, 1416, 1424, 1438, 1449, 1461, 1475, 1493, 1514, 1534, 1556, 1569, 1591, 1608, 1623, 1641, 1659, 1670, 1680, 1696, 1719, 1730, 1750, 1774, 1796, 1818, 1844, 1863, 1891, 1912, 1930, 1948, 1959, 1996, 2020, 2035, 2055, 2073, 2098, 2121, 2141, 2163, 2181, 2199, 2222, 2249, 2274, 2301, 2332, 2351, 2371, 2399, 2417, 2432, 2448, 2474, 2488, 2501, 2518, 2539, 2567, 2600, 2635, 2666, 2702, 2728, 2753, 2773, 2806, 2845, 2899, 2932, 2952, 2964, 2991, 3013, 3035, 3052, 3077, 3090, 3105, 3115, 3138, 3161, 3189, 3217, 3236, 3254, 3271, 3282, 3296, 3309, 3328, 3340, 3344, 3354, 3370, 3385, 3399, 3416};
        std::array<uint16_t, 512> bVec = {3491, 3487, 3481, 3480, 3472, 3468, 3463, 3453, 3438, 3423, 3414, 3403, 3395, 3387, 3383, 3380, 3378, 3378, 3379, 3377, 3371, 3371, 3372, 3371, 3366, 3361, 3355, 3349, 3342, 3338, 3334, 3324, 3315, 3306, 3294, 3284, 3277, 3263, 3250, 3238, 3230, 3223, 3211, 3190, 3178, 3166, 3157, 3152, 3145, 3139, 3132, 3127, 3121, 3115, 3109, 3104, 3097, 3088, 3078, 3063, 3049, 3018, 2995, 2988, 2982, 2977, 2970, 2960, 2946, 2935, 2921, 2901, 2879, 2853, 2825, 2809, 2798, 2786, 2772, 2747, 2725, 2710, 2699, 2679, 2660, 2639, 2622, 2608, 2594, 2560, 2543, 2499, 2462, 2410, 2365, 2326, 2284, 2229, 2182, 2143, 2110, 2076, 2041, 1985, 1944, 1908, 1866, 1831, 1798, 1752, 1702, 1641, 1569, 1519, 1477, 1424, 1379, 1324, 1253, 1227, 1212, 1185, 1141, 1087, 1045, 1002, 947, 914, 866, 797, 745, 710, 670, 641, 585, 533, 501, 456, 416, 379, 357, 341, 323, 314, 309, 305, 299, 295, 290, 287, 283, 279, 276, 274, 272, 270, 272, 270, 268, 267, 266, 264, 264, 262, 261, 262, 259, 259, 258, 257, 257, 257, 256, 256, 255, 254, 253, 253, 252, 253, 252, 252, 252, 251, 250, 249, 249, 249, 248, 249, 249, 249, 249, 249, 248, 249, 249, 250, 248, 250, 250, 249, 250, 250, 250, 249, 250, 249, 249, 248, 248, 248, 248, 248, 248, 247, 248, 247, 247, 246, 246, 245, 245, 246, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 246, 244, 245, 245, 246, 246, 246, 245, 246, 246, 246, 246, 246, 245, 246, 246, 247, 247, 247, 247, 247, 246, 248, 250, 249, 248, 249, 247, 250, 250, 250, 250, 251, 252, 251, 252, 251, 253, 253, 256, 254, 255, 256, 256, 256, 256, 258, 258, 259, 258, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 273, 273, 273, 275, 277, 278, 279, 281, 282, 285, 287, 290, 293, 295, 297, 299, 302, 306, 314, 321, 329, 336, 343, 358, 370, 379, 398, 430, 464, 491, 517, 587, 630, 664, 697, 745, 779, 805, 828, 901, 948, 966, 989, 1035, 1085, 1156, 1222, 1271, 1301, 1339, 1382, 1458, 1533, 1588, 1645, 1686, 1715, 1789, 1850, 1898, 1940, 1966, 2010, 2059, 2114, 2153, 2207, 2266, 2298, 2328, 2352, 2399, 2436, 2457, 2479, 2492, 2521, 2548, 2576, 2604, 2630, 2653, 2675, 2719, 2748, 2772, 2794, 2809, 2839, 2859, 2887, 2914, 2946, 2982, 3007, 3022, 3038, 3056, 3075, 3095, 3111, 3140, 3172, 3184, 3194, 3199, 3208, 3221, 3232, 3243, 3246, 3245, 3241, 3238, 3236, 3229, 3228, 3226, 3227, 3227, 3228, 3231, 3251, 3268, 3289, 3306, 3321, 3333, 3340, 3348, 3352, 3357, 3358, 3356, 3349, 3345, 3340, 3339, 3341, 3352, 3366, 3371, 3373, 3371, 3366, 3351, 3342, 3343, 3352, 3362, 3376, 3386, 3392, 3393, 3389, 3382, 3378, 3382, 3389, 3394, 3393, 3394, 3398, 3409, 3422, 3428, 3436, 3442, 3445, 3446, 3449, 3452, 3455, 3460, 3466, 3477, 3486, 3485, 3477, 3474, 3467, 3455, 3438, 3436, 3437, 3439, 3440, 3439, 3433, 3427, 3425, 3428, 3434, 3441, 3459, 3478, 3489, 3494, 3495, 3497, 3500, 3500, 3499, 3494, 3489, 3485, 3483, 3480, 3479, 3482, 3488, 3492};
        return std::make_unique<OpticalEncoderHandler>(aVec, bVec, A2, A3, 4096.0 * mainEncoderGearRatio);
    }

    static std::unique_ptr<CurrentController> createCurrentController()
    {
        constexpr float pwmToStallCurrent{2.1255355500927635};
        constexpr float backEmfCurrent{-0.0003783291095973121};

        return std::make_unique<CurrentControlModel>(pwmToStallCurrent, backEmfCurrent);
    }

    class ControlParameters : public SetupConfigHolder::DefaultControlParameters
    {
      public:
        //kalman filter observer vector
        static Eigen::Vector3f getKVector()
        {
            Eigen::Vector3f K;
            K << 1.2929796359720591,
                430.5915836864054,
                1348.9805736289009;

            return K;
        }

        //system model A matrix
        static Eigen::Matrix3f getAMatrix()
        {
            Eigen::Matrix3f A;
            A << 1.0, 0.0012, 2.9719935703630102e-05,
                0.0, 0.9990224168326246, 0.04953322617271684,
                0.0, 0.0, 1.0;

            return A;
        }

        //system model invers A matrix
        static Eigen::Matrix3f getAInvMatrix()
        {
            Eigen::Matrix3f AInv;
            AInv << 1.0, -0.0012011742477256611, 2.9778099981808076e-05,
                0.0, 1.0009785397713844, -0.04958169640453182,
                0.0, 0.0, 1.0;

            return AInv;
        }

        //system model B matrix
        static Eigen::Vector3f getBVector()
        {
            Eigen::Vector3f B;
            B << 2.9719935703630102e-05,
                0.04953322617271684,
                0.0;

            return B;
        }
    };
};
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

class ConfigHolder : public SetupConfigHolder
{
public:
    static std::unique_ptr<Communication> getCommunicationHandler()
    {
        auto com = std::make_unique<Communication>(&Serial1, 115200);
        com->addCommunicationNode(
                std::make_unique<DCServoCommunicationHandler>(3, createDCServo<ConfigHolder>()));
        com->addCommunicationNode(std::make_unique<ServoCommunicationHandler>(4, 5));
        com->addCommunicationNode(std::make_unique<ServoCommunicationHandler>(5, 7));
        com->addCommunicationNode(std::make_unique<ServoCommunicationHandler>(6, 9));
        com->addCommunicationNode(std::make_unique<ServoCommunicationHandler>(7, 10));

        return com;
    }
};

#endif
