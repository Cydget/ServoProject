#include <Eigen.h>
#include "../EncoderHandler.h"
#include "../CurrentControlLoop.h"
#include "../OpticalEncoderHandler.h"
#include "../ArduinoC++BugFixes.h"
#include "../CommunicationHandlers.h"

#ifndef CONFIG_HOLDER_H
#define CONFIG_HOLDER_H

class ConfigHolder
{
public:
    static constexpr float getMainEncoderGearRation()
    {
        return 275.0 / 125904.0;
    }

    static std::unique_ptr<CurrentController> createCurrentController()
    {
        constexpr float pwmToStallCurrent{2.61598722};
        constexpr float backEmfCurrent{-0.70435649 * 2 * 3.1415926535897932384626433832795028841972 / 4096.0};

        return std::make_unique<CurrentControlModel>(pwmToStallCurrent, backEmfCurrent);
    }

    static std::unique_ptr<OpticalEncoderHandler> createMainEncoderHandler()
    {
        std::array<uint16_t, 512> aVec = {2956, 2973, 3006, 3022, 3051, 3068, 3089, 3117, 3138, 3166, 3186, 3204, 3235, 3263, 3279, 3299, 3328, 3343, 3353, 3362, 3366, 3380, 3389, 3399, 3408, 3413, 3426, 3434, 3442, 3457, 3472, 3480, 3489, 3501, 3509, 3516, 3531, 3546, 3561, 3576, 3585, 3598, 3607, 3621, 3632, 3632, 3639, 3646, 3650, 3666, 3677, 3682, 3688, 3695, 3698, 3705, 3713, 3718, 3717, 3711, 3710, 3707, 3709, 3708, 3709, 3709, 3715, 3717, 3720, 3729, 3738, 3746, 3752, 3757, 3760, 3763, 3764, 3768, 3771, 3766, 3764, 3761, 3760, 3763, 3768, 3777, 3777, 3778, 3771, 3765, 3763, 3764, 3769, 3781, 3786, 3789, 3789, 3785, 3784, 3788, 3790, 3787, 3794, 3800, 3807, 3811, 3813, 3817, 3817, 3818, 3821, 3826, 3833, 3835, 3834, 3831, 3829, 3827, 3826, 3824, 3817, 3813, 3809, 3809, 3811, 3811, 3810, 3806, 3802, 3804, 3810, 3820, 3827, 3832, 3834, 3835, 3835, 3836, 3837, 3837, 3836, 3834, 3831, 3828, 3825, 3826, 3827, 3829, 3830, 3831, 3830, 3830, 3828, 3826, 3825, 3826, 3826, 3824, 3822, 3820, 3815, 3812, 3809, 3804, 3799, 3796, 3791, 3786, 3779, 3776, 3774, 3774, 3773, 3774, 3774, 3771, 3769, 3770, 3770, 3767, 3764, 3760, 3756, 3752, 3749, 3747, 3744, 3737, 3732, 3724, 3720, 3716, 3710, 3703, 3694, 3689, 3684, 3679, 3673, 3666, 3659, 3654, 3652, 3651, 3649, 3646, 3644, 3637, 3633, 3626, 3622, 3624, 3618, 3612, 3603, 3583, 3566, 3557, 3553, 3549, 3543, 3537, 3530, 3520, 3510, 3496, 3481, 3465, 3458, 3446, 3437, 3424, 3415, 3407, 3399, 3382, 3370, 3360, 3351, 3336, 3321, 3302, 3290, 3275, 3240, 3210, 3187, 3156, 3129, 3100, 3075, 3051, 3031, 3008, 2978, 2954, 2928, 2906, 2882, 2852, 2823, 2796, 2771, 2740, 2715, 2687, 2657, 2634, 2603, 2580, 2558, 2530, 2499, 2456, 2424, 2397, 2378, 2365, 2357, 2337, 2310, 2290, 2270, 2248, 2234, 2226, 2212, 2187, 2173, 2158, 2135, 2099, 2084, 2059, 2041, 2015, 1979, 1953, 1913, 1884, 1848, 1820, 1800, 1768, 1733, 1709, 1682, 1657, 1629, 1615, 1592, 1579, 1561, 1543, 1523, 1513, 1504, 1500, 1493, 1484, 1472, 1464, 1449, 1440, 1430, 1413, 1400, 1381, 1365, 1354, 1342, 1328, 1315, 1304, 1290, 1277, 1263, 1254, 1249, 1242, 1232, 1217, 1199, 1184, 1173, 1165, 1150, 1146, 1138, 1130, 1132, 1125, 1120, 1127, 1123, 1117, 1124, 1123, 1121, 1122, 1121, 1117, 1117, 1115, 1110, 1111, 1107, 1106, 1105, 1101, 1098, 1096, 1091, 1091, 1085, 1085, 1082, 1076, 1077, 1076, 1077, 1075, 1072, 1069, 1069, 1073, 1073, 1071, 1071, 1078, 1086, 1089, 1092, 1093, 1095, 1098, 1095, 1102, 1099, 1099, 1103, 1105, 1108, 1115, 1114, 1117, 1119, 1121, 1128, 1131, 1131, 1139, 1140, 1146, 1151, 1159, 1164, 1163, 1169, 1173, 1183, 1181, 1194, 1202, 1208, 1212, 1222, 1232, 1239, 1247, 1257, 1263, 1269, 1277, 1288, 1298, 1312, 1328, 1342, 1355, 1367, 1384, 1399, 1415, 1431, 1445, 1458, 1471, 1479, 1481, 1490, 1501, 1513, 1526, 1542, 1552, 1572, 1592, 1617, 1636, 1651, 1672, 1688, 1703, 1718, 1741, 1762, 1778, 1790, 1806, 1816, 1845, 1883, 1897, 1910, 1935, 1960, 1987, 2016, 2042, 2080, 2113, 2142, 2184, 2212, 2248, 2287, 2318, 2359, 2380, 2405, 2436, 2454, 2483, 2513, 2542, 2572, 2607, 2638, 2662, 2682, 2705, 2719, 2731, 2747, 2756, 2774, 2792, 2834, 2864, 2885, 2916};
        std::array<uint16_t, 512> bVec = {3436, 3438, 3439, 3437, 3429, 3423, 3422, 3436, 3452, 3477, 3487, 3495, 3496, 3498, 3500, 3501, 3493, 3486, 3483, 3480, 3480, 3479, 3480, 3485, 3487, 3491, 3493, 3493, 3491, 3491, 3489, 3484, 3482, 3477, 3469, 3461, 3450, 3441, 3432, 3423, 3422, 3413, 3405, 3390, 3383, 3381, 3379, 3378, 3375, 3376, 3378, 3377, 3372, 3372, 3374, 3373, 3363, 3357, 3345, 3334, 3333, 3317, 3298, 3289, 3278, 3270, 3258, 3253, 3249, 3241, 3233, 3221, 3206, 3196, 3184, 3175, 3166, 3154, 3146, 3139, 3131, 3119, 3112, 3106, 3100, 3090, 3087, 3072, 3045, 3022, 3002, 2990, 2976, 2964, 2956, 2946, 2936, 2920, 2882, 2850, 2813, 2790, 2768, 2744, 2723, 2701, 2684, 2658, 2625, 2606, 2583, 2541, 2504, 2468, 2439, 2402, 2369, 2334, 2308, 2276, 2244, 2212, 2175, 2147, 2099, 2049, 2001, 1964, 1920, 1858, 1797, 1738, 1686, 1642, 1599, 1545, 1511, 1470, 1425, 1390, 1330, 1280, 1234, 1177, 1129, 1049, 1003, 972, 944, 906, 872, 840, 805, 773, 745, 731, 696, 677, 643, 602, 544, 512, 485, 453, 406, 373, 347, 332, 319, 309, 302, 301, 295, 289, 286, 282, 278, 276, 273, 272, 270, 270, 268, 266, 264, 265, 263, 262, 261, 260, 259, 258, 257, 256, 256, 254, 254, 254, 253, 252, 253, 253, 250, 252, 251, 251, 250, 249, 249, 248, 247, 248, 247, 247, 246, 245, 245, 244, 244, 243, 244, 243, 243, 244, 243, 243, 242, 243, 243, 242, 243, 243, 243, 243, 243, 243, 243, 242, 243, 242, 242, 242, 242, 242, 242, 241, 241, 240, 241, 241, 241, 242, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 242, 243, 242, 242, 241, 242, 242, 241, 242, 242, 242, 242, 243, 242, 243, 242, 242, 243, 243, 243, 243, 243, 244, 244, 243, 243, 243, 243, 244, 244, 245, 245, 246, 245, 246, 246, 246, 247, 247, 248, 248, 249, 249, 249, 250, 251, 251, 251, 252, 252, 253, 253, 255, 253, 255, 254, 255, 255, 257, 257, 257, 258, 259, 261, 262, 262, 263, 265, 266, 267, 269, 270, 272, 273, 274, 275, 278, 280, 284, 288, 290, 295, 301, 305, 310, 318, 327, 326, 334, 353, 375, 407, 428, 472, 516, 571, 630, 674, 714, 773, 819, 857, 900, 944, 969, 1005, 1041, 1094, 1141, 1178, 1207, 1256, 1275, 1304, 1344, 1407, 1450, 1522, 1591, 1653, 1710, 1780, 1834, 1908, 1948, 2013, 2062, 2100, 2137, 2174, 2216, 2273, 2323, 2371, 2407, 2435, 2461, 2486, 2516, 2538, 2566, 2596, 2610, 2640, 2695, 2724, 2740, 2748, 2768, 2774, 2790, 2811, 2821, 2834, 2848, 2842, 2879, 2904, 2933, 2948, 2985, 3002, 3038, 3058, 3079, 3094, 3114, 3128, 3146, 3164, 3177, 3186, 3199, 3212, 3227, 3239, 3247, 3245, 3243, 3235, 3228, 3225, 3224, 3226, 3226, 3229, 3227, 3225, 3226, 3232, 3247, 3259, 3281, 3303, 3320, 3332, 3341, 3351, 3358, 3361, 3358, 3353, 3346, 3344, 3341, 3339, 3338, 3345, 3364, 3368, 3372, 3372, 3364, 3346, 3337, 3344, 3367, 3385, 3391, 3389, 3378, 3382, 3394, 3392, 3392, 3398, 3413, 3431, 3438, 3444, 3450, 3454, 3459, 3463, 3470, 3478, 3486, 3491, 3490, 3489, 3484, 3477, 3473, 3469, 3461, 3449, 3444, 3436};

        return std::make_unique<OpticalEncoderHandler>(aVec, bVec);
    }

    static std::unique_ptr<EncoderHandlerInterface> createOutputEncoderHandler()
    {
        return std::make_unique<EncoderHandler>(A5);
    }

    static constexpr unsigned char getCommunicationId()
    {
        return 3;
    }

    static std::unique_ptr<CommunicationInterface> getCommunicationHandler()
    {
        return std::make_unique<DCServoCommunicationHandler>(getCommunicationId(), 115200);
    }

    static Eigen::Matrix<float, 5, 1> getControlParameterVector()
    {
        Eigen::Matrix<float, 5, 1> L;
        //L << 9.940239281724569, 1.3586010780478561, -0.03237764040441623, -0.03237764040441623 * 10, 1;
        //L << 14.865806368082696, 2.0623236695442064, -0.07122297702645312, -0.07122297702645312 * 10, 2;
        //L << 19.76190853507559, 2.7501424347363677, -0.12380201903044662, -0.12380201903044662 * 10, 4;
        //L << 24.628722042909875, 3.422417759025543, -0.18915403084733035, -0.18915403084733035 * 10, 6;
        //L << 39.05517743541272, 5.349465233936552, -0.4529865426450321, -0.4529865426450321 * 10, 8;
        L << 48.529555346459404, 6.562693416014962, -0.6772985973618402, -0.6772985973618402 * 10, 10;
        //L << 57.89092015732856, 7.721727677879117, -0.9336154818877859, -0.9336154818877859 * 10, 12;
        //L << 94.23296940236878, 11.862863259936727, -2.185085156962166, -2.185085156962166 * 10, 12;

        return L;
    }

    class KalmanFilter
    {
      public:
        static Eigen::Vector3f getKVector()
        {
            Eigen::Vector3f K;
            
            //K << 0.09799424580193117,
            //    2.4964409292865963,
            //    0.5652699951929046;

            //K << 0.16531265413057228,
            //    7.247273820257207,
            //    2.5269719748600346;

            //K << 0.1983825910518331,
            //    10.478680647096779,
            //    4.291072093854287;

            //K << 0.32684007265646386,
            //    28.567812385253276,
            //    18.53313095588553;

            //K << 0.3888374995706161,
            //    40.40850366768767,
            //    30.93862171115473;

            //K << 0.4791413260700308,
            //    61.21885215942826,
            //    57.39263621353391;

            //K << 0.5085413648625792,
            //    68.89605951297686,
            //    68.47216577817979;

            //K << 0.622743534980963,
            //    102.86198025189901,
            //    124.93406815357332;

            // 30 * 4 * 2 pole
            //K << 0.7316969391112194,
            //    141.316769493361,
            //    201.79065187534968;

            // 40 * 4 * 2 pole
            //K << 0.9348115489458093,
            //    228.36239777968316,
            //    418.58900807416495;

            // 50 * 4 * 2 pole
            K << 1.1196854711621897,
                324.4212488665876,
                717.0390978029607;

            // 60 * 4 * 2 pole
            //K << 1.2879572201280896,
            //    425.2887752180842,
            //    1089.0860221513021;

            // 100 * 4 * 2 pole
            //K << 1.8229097365190623,
            //    825.8706566376411,
            //    3075.4863531454275;

            return K;
        }


        static Eigen::Matrix3f getAMatrix()
        {
            Eigen::Matrix3f A;
            A << 1.0, 0.0012, 3.6719999999999994e-05,
            0.0, 0.994, 0.0612,
            0.0, 0.0, 1.0;

            return A;
        }

        static Eigen::Matrix3f getAInvMatrix()
        {
            Eigen::Matrix3f AInv;

            AInv << 1.0, -0.0012072434607645873, 3.7163299798792755e-05,
                0.0, 1.0060362173038229, -0.06156941649899396,
                0.0, 0.0, 1.0;

            return AInv;
        }

        static Eigen::Vector3f getBVector()
        {
            Eigen::Vector3f B;

            B << 3.6719999999999994e-05,
                0.0612,
                0.0;

            return B;
        }
    };
};

#endif
