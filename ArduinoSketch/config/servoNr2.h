#include <Eigen.h>
#include "../EncoderHandler.h"
#include "../CurrentControlLoop.h"
#include "../OpticalEncoderHandler.h"
#include "../ArduinoC++BugFixes.h"
#include "../CommunicationHandlers.h"

#ifndef CONFIG_HOLDER_H
#define CONFIG_HOLDER_H

class ConfigHolder
{
public:
    static constexpr float getMainEncoderGearRation()
    {
        return 275.0 / 125904.0;
    }

    static std::unique_ptr<CurrentController> createCurrentController()
    {
        constexpr float pwmToStallCurrent{2.61598722};
        constexpr float backEmfCurrent{-0.70435649 * 2 * 3.1415926535897932384626433832795028841972 / 4096.0};

        return std::make_unique<CurrentControlModel>(pwmToStallCurrent, backEmfCurrent);
    }

    static std::unique_ptr<OpticalEncoderHandler> createMainEncoderHandler()
    {
        std::array<uint16_t, 512> aVec = {991, 997, 1002, 1006, 1014, 1019, 1024, 1031, 1042, 1048, 1054, 1059, 1063, 1070, 1076, 1079, 1082, 1094, 1100, 1109, 1117, 1121, 1130, 1138, 1152, 1164, 1169, 1177, 1191, 1208, 1229, 1250, 1266, 1288, 1319, 1344, 1361, 1380, 1394, 1409, 1420, 1431, 1443, 1453, 1466, 1474, 1483, 1490, 1500, 1508, 1516, 1522, 1536, 1546, 1557, 1567, 1580, 1599, 1623, 1635, 1656, 1680, 1705, 1721, 1736, 1752, 1765, 1780, 1791, 1804, 1819, 1832, 1841, 1839, 1859, 1876, 1897, 1910, 1928, 1947, 1958, 1972, 1994, 2004, 2033, 2061, 2084, 2102, 2131, 2164, 2190, 2222, 2252, 2279, 2303, 2325, 2350, 2377, 2407, 2422, 2438, 2453, 2472, 2500, 2523, 2536, 2554, 2564, 2577, 2593, 2612, 2630, 2648, 2667, 2684, 2700, 2725, 2748, 2772, 2793, 2808, 2825, 2838, 2853, 2872, 2892, 2903, 2914, 2925, 2934, 2953, 2981, 3003, 3013, 3029, 3034, 3047, 3060, 3076, 3090, 3098, 3112, 3123, 3134, 3145, 3152, 3162, 3171, 3180, 3193, 3200, 3214, 3223, 3229, 3233, 3240, 3247, 3258, 3270, 3274, 3277, 3280, 3285, 3289, 3298, 3305, 3312, 3316, 3328, 3333, 3341, 3345, 3350, 3352, 3356, 3359, 3362, 3365, 3369, 3374, 3375, 3382, 3385, 3391, 3394, 3392, 3395, 3398, 3388, 3374, 3357, 3368, 3403, 3409, 3410, 3413, 3418, 3421, 3423, 3420, 3420, 3419, 3422, 3421, 3420, 3422, 3421, 3420, 3422, 3420, 3420, 3417, 3416, 3416, 3418, 3416, 3418, 3419, 3421, 3424, 3428, 3431, 3432, 3437, 3441, 3446, 3448, 3455, 3460, 3468, 3481, 3490, 3495, 3501, 3502, 3507, 3510, 3512, 3514, 3511, 3507, 3502, 3499, 3497, 3491, 3487, 3475, 3469, 3461, 3459, 3455, 3454, 3457, 3455, 3451, 3449, 3448, 3443, 3440, 3438, 3436, 3436, 3436, 3436, 3435, 3435, 3435, 3438, 3439, 3440, 3440, 3440, 3442, 3440, 3435, 3429, 3428, 3428, 3427, 3423, 3419, 3416, 3414, 3413, 3414, 3415, 3415, 3415, 3413, 3414, 3415, 3416, 3416, 3416, 3414, 3411, 3408, 3408, 3407, 3406, 3405, 3400, 3393, 3384, 3381, 3380, 3380, 3370, 3360, 3351, 3343, 3336, 3330, 3320, 3312, 3307, 3303, 3298, 3294, 3290, 3287, 3282, 3272, 3266, 3258, 3251, 3248, 3244, 3235, 3221, 3206, 3198, 3190, 3174, 3164, 3156, 3141, 3129, 3117, 3104, 3095, 3086, 3076, 3069, 3061, 3055, 3049, 3038, 3027, 3016, 3009, 2994, 2984, 2974, 2961, 2944, 2923, 2898, 2884, 2871, 2848, 2830, 2813, 2783, 2761, 2734, 2711, 2687, 2673, 2651, 2640, 2629, 2614, 2602, 2592, 2572, 2552, 2535, 2506, 2490, 2471, 2454, 2431, 2407, 2365, 2334, 2312, 2288, 2270, 2249, 2231, 2208, 2183, 2165, 2144, 2132, 2116, 2103, 2098, 2081, 2072, 2062, 2043, 2028, 2014, 1994, 1979, 1963, 1948, 1936, 1919, 1899, 1867, 1849, 1830, 1814, 1801, 1781, 1767, 1744, 1727, 1704, 1684, 1668, 1652, 1640, 1631, 1614, 1599, 1579, 1563, 1550, 1530, 1514, 1498, 1480, 1463, 1445, 1421, 1404, 1382, 1375, 1362, 1352, 1341, 1332, 1321, 1312, 1303, 1291, 1282, 1272, 1263, 1257, 1246, 1228, 1219, 1209, 1197, 1185, 1175, 1162, 1147, 1136, 1119, 1102, 1086, 1070, 1067, 1057, 1047, 1040, 1034, 1026, 1017, 1008, 999, 990, 985, 979, 975, 970, 961, 956, 953, 946, 941, 936, 928, 932, 924, 919, 915, 915, 914, 915, 917, 918, 923, 929, 931, 936, 942, 954, 957, 964, 964, 968, 976, 981, 986, 989};
        std::array<uint16_t, 512> bVec = {1036, 1070, 1110, 1152, 1194, 1226, 1262, 1319, 1360, 1396, 1434, 1460, 1497, 1524, 1556, 1582, 1604, 1641, 1668, 1699, 1725, 1744, 1778, 1802, 1838, 1864, 1875, 1892, 1918, 1948, 1985, 2020, 2047, 2074, 2110, 2145, 2164, 2190, 2207, 2225, 2239, 2262, 2283, 2308, 2331, 2346, 2361, 2379, 2395, 2408, 2422, 2430, 2450, 2462, 2473, 2483, 2492, 2507, 2529, 2538, 2553, 2569, 2582, 2593, 2599, 2608, 2613, 2620, 2629, 2638, 2652, 2658, 2661, 2661, 2668, 2675, 2681, 2684, 2688, 2692, 2695, 2701, 2707, 2708, 2711, 2712, 2715, 2716, 2723, 2725, 2724, 2721, 2718, 2720, 2723, 2723, 2724, 2724, 2728, 2732, 2734, 2736, 2738, 2737, 2736, 2736, 2738, 2741, 2744, 2743, 2741, 2735, 2740, 2755, 2777, 2791, 2800, 2803, 2810, 2820, 2823, 2824, 2818, 2818, 2825, 2842, 2852, 2863, 2874, 2881, 2889, 2896, 2898, 2896, 2894, 2893, 2893, 2896, 2889, 2879, 2873, 2866, 2860, 2865, 2871, 2870, 2867, 2861, 2854, 2850, 2848, 2848, 2846, 2847, 2848, 2848, 2847, 2845, 2840, 2837, 2832, 2834, 2830, 2832, 2836, 2840, 2842, 2840, 2836, 2833, 2819, 2804, 2796, 2796, 2797, 2797, 2798, 2798, 2801, 2802, 2798, 2794, 2789, 2788, 2786, 2784, 2786, 2786, 2790, 2802, 2799, 2798, 2781, 2771, 2760, 2755, 2748, 2740, 2723, 2705, 2702, 2700, 2700, 2696, 2690, 2687, 2679, 2676, 2669, 2660, 2654, 2643, 2632, 2620, 2610, 2608, 2610, 2601, 2592, 2571, 2559, 2538, 2526, 2516, 2516, 2509, 2486, 2457, 2449, 2431, 2404, 2385, 2373, 2360, 2350, 2344, 2329, 2312, 2287, 2254, 2216, 2198, 2186, 2179, 2156, 2138, 2098, 2075, 2037, 2011, 1985, 1958, 1934, 1889, 1823, 1798, 1780, 1738, 1703, 1673, 1637, 1613, 1588, 1567, 1544, 1520, 1497, 1455, 1426, 1402, 1390, 1367, 1351, 1318, 1280, 1233, 1179, 1150, 1124, 1090, 1052, 998, 946, 913, 875, 816, 777, 738, 699, 667, 640, 603, 577, 548, 527, 494, 474, 457, 445, 433, 422, 409, 396, 379, 370, 365, 369, 358, 353, 350, 345, 341, 337, 337, 334, 331, 330, 327, 328, 326, 323, 322, 319, 318, 317, 315, 313, 312, 311, 307, 307, 305, 304, 303, 301, 300, 300, 300, 298, 298, 296, 297, 296, 295, 294, 296, 295, 294, 293, 293, 293, 292, 291, 291, 290, 289, 289, 289, 288, 287, 287, 286, 287, 285, 286, 286, 284, 286, 285, 283, 283, 284, 284, 283, 283, 283, 282, 282, 283, 282, 281, 281, 281, 281, 280, 280, 279, 279, 280, 280, 280, 280, 280, 280, 280, 279, 280, 279, 279, 281, 280, 280, 280, 280, 281, 279, 282, 281, 281, 283, 281, 282, 282, 282, 283, 282, 282, 281, 282, 283, 283, 283, 283, 284, 284, 285, 284, 284, 284, 284, 285, 285, 285, 286, 287, 288, 287, 287, 288, 289, 290, 292, 293, 293, 294, 294, 295, 296, 296, 297, 298, 298, 299, 299, 300, 300, 301, 300, 302, 302, 303, 302, 303, 303, 306, 306, 308, 307, 310, 309, 311, 311, 313, 314, 316, 318, 320, 323, 323, 324, 326, 327, 329, 334, 332, 336, 338, 341, 346, 347, 353, 359, 375, 393, 417, 442, 474, 510, 538, 574, 602, 637, 690, 740, 777, 807, 827, 859, 893, 941, 974, 999};

        return std::make_unique<OpticalEncoderHandler>(aVec, bVec);
    }

    static std::unique_ptr<EncoderHandlerInterface> createOutputEncoderHandler()
    {
        return std::make_unique<EncoderHandler>(A5);
    }

    static constexpr unsigned char getCommunicationId()
    {
        return 2;
    }

    static std::unique_ptr<CommunicationInterface> getCommunicationHandler()
    {
        return std::make_unique<DCServoCommunicationHandler>(getCommunicationId(), 115200);
    }

    static Eigen::Matrix<float, 5, 1> getControlParameterVector()
    {
        Eigen::Matrix<float, 5, 1> L;
        //L << 9.940239281724569, 1.3586010780478561, -0.03237764040441623, -0.03237764040441623 * 10, 4;
        L << 14.865806368082696, 2.0623236695442064, -0.07122297702645312, -0.07122297702645312 * 10, 6;
        //L << 19.76190853507559, 2.7501424347363677, -0.12380201903044662, -0.12380201903044662 * 10, 8;
        //L << 24.628722042909875, 3.422417759025543, -0.18915403084733035, -0.18915403084733035 * 10, 12;
        //L << 57.89092015732856, 7.721727677879117, -0.9336154818877859, -0.9336154818877859 * 10, 12;
        //L << 94.23296940236878, 11.862863259936727, -2.185085156962166, -2.185085156962166 * 10, 12;

        return L;
    }

    class KalmanFilter
    {
      public:
        static Eigen::Vector3f getKVector()
        {
            Eigen::Vector3f K;
            
            //K << 0.09799424580193117,
            //    2.4964409292865963,
            //    0.5652699951929046;

            //K << 0.16531265413057228,
            //    7.247273820257207,
            //    2.5269719748600346;

            //K << 0.1983825910518331,
            //    10.478680647096779,
            //    4.291072093854287;

            //K << 0.32684007265646386,
            //    28.567812385253276,
            //    18.53313095588553;

            //K << 0.3888374995706161,
            //    40.40850366768767,
            //    30.93862171115473;

            //K << 0.4791413260700308,
            //    61.21885215942826,
            //    57.39263621353391;

            //K << 0.5085413648625792,
            //    68.89605951297686,
            //    68.47216577817979;

            //K << 0.622743534980963,
            //    102.86198025189901,
            //    124.93406815357332;

            // 30 * 4 * 2 pole
            //K << 0.7316969391112194,
            //    141.316769493361,
            //    201.79065187534968;

            // 60 * 4 * 2 pole
            K << 1.2879572201280896,
                425.2887752180842,
                1089.0860221513021;

            // 100 * 4 * 2 pole
            //K << 1.8229097365190623,
            //    825.8706566376411,
            //    3075.4863531454275;

            return K;
        }


        static Eigen::Matrix3f getAMatrix()
        {
            Eigen::Matrix3f A;
            A << 1.0, 0.0012, 3.6719999999999994e-05,
            0.0, 0.994, 0.0612,
            0.0, 0.0, 1.0;

            return A;
        }

        static Eigen::Matrix3f getAInvMatrix()
        {
            Eigen::Matrix3f AInv;

            AInv << 1.0, -0.0012072434607645873, 3.7163299798792755e-05,
                0.0, 1.0060362173038229, -0.06156941649899396,
                0.0, 0.0, 1.0;

            return AInv;
        }

        static Eigen::Vector3f getBVector()
        {
            Eigen::Vector3f B;

            B << 3.6719999999999994e-05,
                0.0612,
                0.0;

            return B;
        }
    };
};

#endif
