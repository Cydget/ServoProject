#include "../defaultConfigHolder.h"

#ifndef CONFIG_HOLDER_H
#define CONFIG_HOLDER_H

class SetupConfigHolder : public DefaultConfigHolder
{
public:
    static constexpr float getMainEncoderGearRation()
    {
        // replace with gear ratio from motor to output
        return 275.0 / 125904.0;
    }

    static std::unique_ptr<Communication> getCommunicationHandler()
    {
        auto com = std::make_unique<Communication>(&Serial1, 115200);
        com->addCommunicationNode(std::make_unique<DCServoCommunicationHandler>(2));

        return com;
    }
};

// replace with generated output from systemIdent.py
// vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// config setps
// x 1) disconnect motor from gearbox
// x 2) compile and transfer to servo nr x
// x 3) open MasterCommunication folder in terminal
// x 4) run 'make'
// x 5) run './executable --servoNr x --recOpticalEncoder --output=opticalEncoderData.txt'
// x 6) run './systemIdent.py --opticalEncoderDataFile=opticalEncoderData.txt'
// x 7) copy past new generated ConfigHolder class, from terminal, over old class
// x 8) compile and transfer to servo nr x with new ConfigHolder class
// x 9) run './executable --servoNr x --recSystemIdentData --output=systemIdentData.txt'
// x 10) run './systemIdent.py --opticalEncoderDataFile=opticalEncoderData.txt --systemIdentDataFile=systemIdentData.txt'
// x 11) copy past new generated ConfigHolder class, from terminal, over old class
// x 12) connect motor to gearbox again
// x 13) compile and transfer to servo nr x with new ConfigHolder class
class ConfigHolder : public SetupConfigHolder
{
public:
    static std::unique_ptr<OpticalEncoderHandler> createMainEncoderHandler()
    {
        std::array<uint16_t, 512> aVec = {3640, 3640, 3639, 3639, 3636, 3635, 3634, 3632, 3631, 3628, 3627, 3624, 3622, 3619, 3617, 3615, 3612, 3611, 3609, 3609, 3606, 3602, 3598, 3595, 3592, 3590, 3588, 3584, 3580, 3578, 3571, 3569, 3562, 3559, 3557, 3553, 3552, 3551, 3548, 3545, 3543, 3537, 3534, 3531, 3527, 3521, 3519, 3513, 3508, 3505, 3497, 3494, 3490, 3486, 3483, 3480, 3472, 3468, 3463, 3454, 3446, 3442, 3437, 3430, 3425, 3416, 3413, 3403, 3392, 3384, 3377, 3368, 3361, 3354, 3345, 3339, 3329, 3321, 3315, 3307, 3303, 3300, 3290, 3283, 3274, 3262, 3254, 3238, 3225, 3213, 3197, 3188, 3174, 3166, 3152, 3139, 3130, 3120, 3110, 3102, 3090, 3072, 3052, 3042, 3032, 3020, 3008, 2996, 2982, 2966, 2959, 2951, 2936, 2920, 2904, 2891, 2882, 2870, 2852, 2845, 2836, 2830, 2821, 2808, 2798, 2785, 2773, 2765, 2758, 2748, 2738, 2728, 2717, 2714, 2690, 2679, 2661, 2652, 2644, 2636, 2626, 2619, 2603, 2585, 2575, 2556, 2538, 2532, 2525, 2513, 2505, 2495, 2486, 2478, 2467, 2450, 2439, 2427, 2415, 2404, 2388, 2379, 2368, 2357, 2341, 2327, 2316, 2306, 2297, 2275, 2258, 2240, 2219, 2203, 2191, 2185, 2177, 2168, 2156, 2144, 2129, 2114, 2103, 2093, 2084, 2076, 2067, 2055, 2040, 2024, 2009, 2000, 1991, 1976, 1969, 1961, 1948, 1934, 1922, 1910, 1899, 1878, 1863, 1853, 1844, 1836, 1822, 1816, 1806, 1802, 1794, 1787, 1781, 1770, 1752, 1740, 1730, 1721, 1714, 1702, 1695, 1690, 1678, 1668, 1662, 1653, 1651, 1643, 1635, 1628, 1623, 1620, 1607, 1603, 1600, 1594, 1590, 1586, 1583, 1578, 1571, 1568, 1564, 1562, 1558, 1553, 1548, 1545, 1542, 1539, 1537, 1533, 1532, 1529, 1528, 1525, 1521, 1522, 1520, 1519, 1519, 1518, 1519, 1520, 1521, 1520, 1518, 1520, 1522, 1522, 1522, 1527, 1528, 1530, 1531, 1534, 1536, 1538, 1539, 1542, 1546, 1547, 1548, 1554, 1560, 1567, 1573, 1579, 1589, 1596, 1602, 1611, 1620, 1626, 1635, 1645, 1651, 1662, 1672, 1683, 1689, 1697, 1705, 1717, 1730, 1746, 1757, 1771, 1778, 1789, 1801, 1809, 1822, 1834, 1851, 1866, 1881, 1889, 1898, 1907, 1917, 1933, 1942, 1951, 1960, 1973, 1983, 1993, 2002, 2018, 2037, 2053, 2068, 2087, 2102, 2112, 2122, 2137, 2153, 2163, 2179, 2192, 2204, 2213, 2228, 2244, 2256, 2274, 2295, 2314, 2327, 2346, 2366, 2382, 2395, 2419, 2441, 2453, 2467, 2487, 2516, 2544, 2564, 2577, 2597, 2616, 2627, 2647, 2667, 2680, 2692, 2709, 2725, 2742, 2768, 2785, 2798, 2814, 2834, 2848, 2864, 2872, 2884, 2896, 2925, 2941, 2960, 2979, 2998, 3012, 3030, 3045, 3052, 3065, 3088, 3103, 3112, 3124, 3134, 3150, 3170, 3184, 3194, 3204, 3214, 3226, 3242, 3250, 3260, 3268, 3280, 3289, 3296, 3305, 3320, 3329, 3336, 3342, 3347, 3360, 3378, 3387, 3395, 3402, 3408, 3414, 3420, 3429, 3440, 3446, 3452, 3459, 3467, 3474, 3476, 3482, 3486, 3495, 3501, 3505, 3509, 3513, 3518, 3521, 3524, 3529, 3536, 3541, 3548, 3551, 3556, 3560, 3565, 3566, 3573, 3576, 3580, 3584, 3589, 3591, 3596, 3602, 3607, 3608, 3612, 3614, 3616, 3619, 3622, 3624, 3626, 3628, 3630, 3632, 3633, 3634, 3636, 3636, 3638, 3639, 3639, 3640, 3641, 3642, 3641, 3643, 3643, 3644, 3643, 3644, 3645, 3644, 3644, 3644, 3644, 3644, 3642, 3643, 3644, 3643, 3643, 3643, 3643, 3643, 3645, 3643, 3644, 3643, 3642, 3642, 3642, 3642};
        std::array<uint16_t, 512> bVec = {2708, 2687, 2657, 2649, 2627, 2602, 2579, 2556, 2544, 2525, 2508, 2486, 2460, 2442, 2416, 2388, 2365, 2343, 2319, 2309, 2284, 2251, 2223, 2197, 2175, 2161, 2143, 2122, 2086, 2061, 2036, 2009, 1980, 1955, 1938, 1922, 1906, 1893, 1880, 1864, 1850, 1814, 1796, 1777, 1754, 1724, 1693, 1660, 1647, 1625, 1588, 1565, 1537, 1518, 1506, 1473, 1445, 1420, 1390, 1349, 1304, 1281, 1257, 1223, 1187, 1153, 1135, 1095, 1035, 1008, 979, 938, 913, 884, 860, 828, 796, 768, 746, 719, 703, 693, 670, 644, 613, 577, 544, 508, 475, 444, 415, 398, 380, 368, 360, 353, 347, 343, 340, 337, 332, 325, 321, 319, 318, 316, 313, 312, 312, 308, 307, 306, 304, 303, 301, 299, 299, 298, 295, 296, 295, 294, 294, 293, 292, 291, 290, 290, 289, 288, 289, 287, 288, 290, 287, 285, 284, 286, 285, 284, 285, 285, 285, 283, 284, 284, 282, 282, 283, 283, 283, 282, 281, 282, 281, 282, 282, 282, 282, 281, 282, 282, 282, 282, 282, 281, 282, 281, 282, 282, 282, 284, 283, 283, 283, 284, 284, 284, 284, 285, 286, 286, 286, 287, 287, 290, 288, 290, 291, 291, 293, 295, 295, 296, 297, 300, 300, 303, 304, 306, 306, 312, 316, 317, 321, 323, 327, 330, 333, 335, 338, 341, 344, 347, 359, 368, 374, 385, 392, 406, 412, 428, 450, 471, 489, 511, 532, 558, 586, 613, 636, 664, 712, 732, 749, 778, 811, 829, 851, 885, 932, 963, 988, 1020, 1057, 1114, 1160, 1220, 1270, 1310, 1357, 1379, 1410, 1441, 1464, 1493, 1525, 1576, 1621, 1656, 1682, 1714, 1743, 1769, 1795, 1813, 1833, 1856, 1883, 1913, 1969, 2006, 2045, 2074, 2101, 2134, 2167, 2201, 2234, 2264, 2293, 2310, 2339, 2370, 2410, 2452, 2479, 2503, 2533, 2554, 2568, 2589, 2614, 2634, 2653, 2672, 2693, 2708, 2731, 2750, 2758, 2776, 2796, 2814, 2840, 2869, 2883, 2905, 2916, 2930, 2949, 2962, 2979, 2996, 3017, 3034, 3052, 3066, 3076, 3081, 3090, 3105, 3113, 3119, 3125, 3135, 3143, 3149, 3156, 3165, 3175, 3182, 3190, 3200, 3206, 3212, 3218, 3226, 3234, 3241, 3247, 3252, 3257, 3263, 3269, 3275, 3280, 3289, 3295, 3304, 3308, 3315, 3323, 3328, 3333, 3340, 3348, 3353, 3358, 3364, 3372, 3378, 3384, 3387, 3391, 3392, 3398, 3401, 3405, 3407, 3412, 3413, 3416, 3420, 3423, 3425, 3428, 3430, 3431, 3434, 3437, 3438, 3439, 3439, 3443, 3443, 3445, 3447, 3447, 3449, 3450, 3450, 3452, 3447, 3453, 3452, 3452, 3452, 3453, 3455, 3456, 3456, 3458, 3458, 3458, 3459, 3461, 3461, 3464, 3463, 3466, 3466, 3467, 3468, 3468, 3469, 3469, 3470, 3469, 3469, 3469, 3468, 3466, 3464, 3463, 3461, 3459, 3457, 3452, 3449, 3447, 3442, 3439, 3437, 3434, 3432, 3430, 3426, 3425, 3421, 3420, 3417, 3414, 3414, 3412, 3409, 3402, 3396, 3392, 3389, 3384, 3382, 3378, 3374, 3372, 3369, 3365, 3360, 3356, 3352, 3346, 3338, 3332, 3327, 3320, 3315, 3310, 3301, 3294, 3287, 3280, 3272, 3264, 3257, 3251, 3243, 3239, 3231, 3223, 3216, 3210, 3202, 3195, 3184, 3175, 3163, 3154, 3141, 3126, 3114, 3101, 3084, 3073, 3060, 3039, 3026, 3013, 2997, 2982, 2962, 2950, 2932, 2916, 2896, 2879, 2864, 2852, 2837, 2809, 2778, 2760, 2745};
        return std::make_unique<OpticalEncoderHandler>(aVec, bVec);
    }

    static std::unique_ptr<CurrentController> createCurrentController()
    {
        constexpr float pwmToStallCurrent{1.945991041784367};
        constexpr float backEmfCurrent{-0.00030467666381376284};

        return std::make_unique<CurrentControlModel>(pwmToStallCurrent, backEmfCurrent);
    }

    class ControlParameters : public SetupConfigHolder::DefaultControlParameters
    {
      public:
        //kalman filter observer vector
        static Eigen::Vector3f getKVector()
        {
            Eigen::Vector3f K;
            K << 1.291717662635957,
                429.25524143295996,
                1346.4034498254323;

            return K;
        }

        //system model A matrix
        static Eigen::Matrix3f getAMatrix()
        {
            Eigen::Matrix3f A;
            A << 1.0, 0.0012, 2.9758054287514434e-05,
                0.0, 0.9977604432525484, 0.049596757145857394,
                0.0, 0.0, 1.0;

            return A;
        }

        //system model invers A matrix
        static Eigen::Matrix3f getAInvMatrix()
        {
            Eigen::Matrix3f AInv;
            AInv << 1.0, -0.001202693500343811, 2.989164316993871e-05,
                0.0, 1.0022445836198426, -0.04970808121454429,
                0.0, 0.0, 1.0;

            return AInv;
        }

        //system model B matrix
        static Eigen::Vector3f getBVector()
        {
            Eigen::Vector3f B;
            B << 2.9758054287514434e-05,
                0.049596757145857394,
                0.0;

            return B;
        }

        //state feedback vecktor
        static Eigen::Matrix<float, 5, 1> getLVector(uint8_t controllerSpeed, uint8_t backlashControllerSpeed)
        {
            float dt = getAMatrix()(0, 1);
            float a = getAMatrix()(1, 1);
            float b = getBVector()(1);

            return calculateLVector(controllerSpeed, backlashControllerSpeed, dt, a, b);
        }
    };
};
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#endif
