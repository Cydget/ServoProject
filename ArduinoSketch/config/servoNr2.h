#include <Eigen.h>
#include "../EncoderHandler.h"
#include "../CurrentControlLoop.h"
#include "../OpticalEncoderHandler.h"
#include "../ArduinoC++BugFixes.h"
#include "../CommunicationHandlers.h"

#ifndef CONFIG_HOLDER_H
#define CONFIG_HOLDER_H

class ConfigHolder
{
public:
    static constexpr float getMainEncoderGearRation()
    {
        return 275.0 / 125904.0;
    }

    static std::unique_ptr<CurrentController> createCurrentController()
    {
        constexpr float pwmToStallCurrent{2.61598722};
        constexpr float backEmfCurrent{-0.70435649 * 2 * 3.1415926535897932384626433832795028841972 / 4096.0};

        return std::make_unique<CurrentControlModel>(pwmToStallCurrent, backEmfCurrent);
    }

    static std::unique_ptr<OpticalEncoderHandler> createMainEncoderHandler()
    {
        std::array<uint16_t, 512> aVec = {2881, 2889, 2904, 2926, 2949, 2960, 2974, 2989, 3008, 3017, 3028, 3041, 3053, 3069, 3092, 3102, 3114, 3130, 3141, 3156, 3167, 3183, 3195, 3218, 3234, 3256, 3266, 3270, 3275, 3268, 3289, 3300, 3309, 3316, 3331, 3344, 3354, 3364, 3374, 3383, 3392, 3401, 3412, 3423, 3432, 3438, 3444, 3447, 3453, 3461, 3469, 3473, 3481, 3485, 3493, 3499, 3505, 3510, 3516, 3521, 3523, 3529, 3533, 3539, 3545, 3548, 3555, 3560, 3565, 3570, 3574, 3576, 3580, 3585, 3589, 3594, 3598, 3602, 3607, 3609, 3614, 3618, 3620, 3626, 3629, 3632, 3634, 3636, 3637, 3638, 3640, 3644, 3646, 3647, 3648, 3650, 3652, 3654, 3654, 3656, 3657, 3657, 3658, 3658, 3659, 3659, 3660, 3660, 3661, 3661, 3661, 3661, 3662, 3661, 3661, 3661, 3661, 3660, 3661, 3661, 3661, 3660, 3662, 3662, 3661, 3662, 3663, 3661, 3661, 3662, 3661, 3659, 3658, 3658, 3657, 3656, 3653, 3652, 3651, 3653, 3645, 3643, 3641, 3639, 3637, 3635, 3634, 3631, 3631, 3629, 3627, 3624, 3621, 3620, 3618, 3613, 3611, 3610, 3607, 3604, 3601, 3598, 3595, 3592, 3585, 3583, 3580, 3578, 3574, 3570, 3565, 3561, 3557, 3552, 3549, 3545, 3543, 3538, 3534, 3529, 3522, 3518, 3512, 3509, 3500, 3495, 3490, 3485, 3476, 3472, 3467, 3463, 3458, 3452, 3447, 3440, 3433, 3427, 3418, 3414, 3408, 3400, 3398, 3385, 3379, 3369, 3364, 3354, 3346, 3340, 3326, 3316, 3308, 3299, 3288, 3271, 3257, 3249, 3240, 3234, 3221, 3209, 3193, 3183, 3173, 3164, 3150, 3138, 3127, 3115, 3100, 3082, 3068, 3059, 3051, 3038, 3027, 3009, 3003, 2995, 2988, 2976, 2966, 2958, 2946, 2931, 2918, 2912, 2903, 2892, 2875, 2866, 2854, 2840, 2824, 2818, 2803, 2784, 2772, 2761, 2739, 2730, 2724, 2719, 2709, 2696, 2681, 2668, 2652, 2643, 2636, 2625, 2614, 2596, 2588, 2577, 2564, 2553, 2544, 2541, 2532, 2526, 2511, 2501, 2493, 2480, 2477, 2466, 2449, 2430, 2417, 2410, 2403, 2395, 2386, 2375, 2357, 2347, 2338, 2316, 2303, 2291, 2269, 2255, 2242, 2224, 2213, 2202, 2189, 2176, 2162, 2148, 2134, 2118, 2105, 2092, 2075, 2060, 2052, 2044, 2034, 2027, 2018, 2010, 2003, 1994, 1983, 1960, 1951, 1941, 1933, 1918, 1910, 1896, 1886, 1879, 1867, 1861, 1851, 1838, 1826, 1818, 1803, 1794, 1783, 1767, 1752, 1739, 1722, 1709, 1703, 1694, 1685, 1679, 1674, 1667, 1659, 1653, 1642, 1636, 1628, 1622, 1615, 1612, 1609, 1603, 1596, 1591, 1587, 1583, 1577, 1573, 1570, 1565, 1561, 1558, 1553, 1549, 1548, 1542, 1542, 1542, 1536, 1534, 1532, 1527, 1528, 1525, 1520, 1516, 1515, 1513, 1511, 1511, 1511, 1510, 1511, 1512, 1512, 1512, 1512, 1513, 1513, 1516, 1519, 1519, 1523, 1526, 1526, 1527, 1532, 1531, 1534, 1539, 1538, 1542, 1544, 1546, 1552, 1558, 1562, 1569, 1577, 1584, 1593, 1604, 1617, 1626, 1636, 1660, 1676, 1680, 1693, 1707, 1714, 1731, 1741, 1757, 1766, 1776, 1787, 1795, 1806, 1816, 1826, 1833, 1851, 1865, 1880, 1888, 1898, 1910, 1923, 1936, 1943, 1950, 1954, 1961, 1966, 1978, 1990, 1999, 2008, 2030, 2042, 2060, 2073, 2095, 2114, 2132, 2155, 2170, 2186, 2196, 2211, 2225, 2240, 2259, 2277, 2305, 2321, 2339, 2354, 2369, 2386, 2406, 2415, 2430, 2450, 2466, 2478, 2501, 2529, 2545, 2563, 2569, 2580, 2591, 2600, 2616, 2629, 2647, 2664, 2682, 2702, 2731, 2758, 2774, 2791, 2811, 2837, 2859};
        std::array<uint16_t, 512> bVec = {3456, 3458, 3459, 3462, 3464, 3464, 3465, 3466, 3467, 3468, 3468, 3470, 3471, 3471, 3471, 3472, 3472, 3473, 3473, 3476, 3475, 3475, 3477, 3477, 3477, 3480, 3482, 3482, 3484, 3484, 3485, 3486, 3487, 3487, 3488, 3489, 3489, 3489, 3489, 3487, 3488, 3486, 3485, 3483, 3480, 3477, 3476, 3475, 3472, 3468, 3465, 3464, 3458, 3457, 3453, 3450, 3449, 3445, 3444, 3440, 3440, 3437, 3434, 3428, 3428, 3424, 3419, 3415, 3411, 3407, 3403, 3400, 3397, 3394, 3389, 3385, 3382, 3378, 3373, 3370, 3366, 3360, 3353, 3342, 3336, 3329, 3324, 3319, 3316, 3308, 3302, 3291, 3281, 3274, 3267, 3260, 3253, 3241, 3236, 3232, 3220, 3211, 3205, 3196, 3189, 3182, 3165, 3153, 3140, 3131, 3116, 3101, 3092, 3083, 3076, 3066, 3054, 3040, 3027, 3006, 2988, 2967, 2946, 2927, 2900, 2891, 2874, 2844, 2811, 2786, 2772, 2749, 2735, 2715, 2689, 2661, 2625, 2609, 2584, 2559, 2521, 2494, 2466, 2452, 2435, 2405, 2382, 2366, 2358, 2335, 2311, 2288, 2260, 2242, 2222, 2192, 2175, 2166, 2149, 2121, 2109, 2087, 2066, 2044, 2000, 1982, 1966, 1951, 1922, 1895, 1871, 1845, 1819, 1794, 1771, 1752, 1734, 1709, 1680, 1654, 1616, 1592, 1559, 1540, 1494, 1469, 1445, 1407, 1360, 1335, 1314, 1289, 1263, 1241, 1212, 1179, 1145, 1111, 1071, 1050, 1026, 994, 973, 933, 904, 863, 840, 808, 787, 753, 712, 682, 656, 624, 590, 539, 499, 474, 456, 441, 415, 394, 377, 368, 360, 353, 347, 342, 337, 333, 329, 323, 320, 318, 316, 314, 312, 310, 309, 307, 308, 303, 304, 304, 302, 300, 299, 297, 298, 295, 294, 294, 293, 293, 290, 289, 288, 288, 287, 286, 284, 284, 285, 284, 284, 284, 283, 282, 282, 282, 282, 281, 281, 281, 281, 280, 280, 280, 280, 281, 280, 279, 279, 280, 280, 279, 278, 281, 279, 279, 278, 280, 279, 279, 278, 280, 279, 278, 278, 279, 280, 280, 280, 280, 280, 282, 280, 281, 281, 282, 281, 283, 283, 284, 284, 285, 287, 287, 288, 288, 289, 290, 290, 290, 292, 293, 293, 297, 298, 299, 300, 302, 302, 306, 309, 310, 313, 314, 316, 320, 323, 326, 329, 334, 338, 344, 353, 362, 372, 388, 395, 407, 421, 436, 448, 462, 486, 509, 538, 562, 594, 625, 650, 670, 683, 709, 740, 764, 793, 821, 851, 889, 908, 931, 963, 1003, 1036, 1076, 1106, 1154, 1179, 1194, 1250, 1280, 1324, 1367, 1394, 1425, 1477, 1518, 1562, 1607, 1642, 1688, 1724, 1747, 1763, 1785, 1817, 1851, 1889, 1921, 1943, 1983, 2021, 2073, 2102, 2129, 2149, 2187, 2222, 2244, 2272, 2298, 2315, 2344, 2362, 2384, 2412, 2446, 2470, 2499, 2524, 2544, 2571, 2600, 2631, 2657, 2679, 2727, 2759, 2771, 2795, 2819, 2831, 2852, 2875, 2902, 2916, 2930, 2949, 2959, 2973, 2987, 2998, 3011, 3034, 3052, 3068, 3077, 3088, 3099, 3111, 3122, 3128, 3133, 3137, 3139, 3147, 3154, 3161, 3166, 3176, 3185, 3193, 3201, 3209, 3219, 3229, 3238, 3251, 3259, 3266, 3271, 3276, 3284, 3290, 3296, 3306, 3316, 3324, 3329, 3335, 3340, 3346, 3352, 3358, 3362, 3369, 3375, 3378, 3384, 3391, 3397, 3399, 3402, 3405, 3407, 3408, 3410, 3414, 3419, 3422, 3424, 3428, 3435, 3439, 3442, 3444, 3446, 3450, 3454};

        return std::make_unique<OpticalEncoderHandler>(aVec, bVec);
    }

    static std::unique_ptr<EncoderHandlerInterface> createOutputEncoderHandler()
    {
        return std::make_unique<EncoderHandler>(A5);
    }

    static constexpr unsigned char getCommunicationId()
    {
        return 2;
    }

    static std::unique_ptr<CommunicationInterface> getCommunicationHandler()
    {
        return std::make_unique<DCServoCommunicationHandler>(getCommunicationId(), 115200);
    }

    static Eigen::Matrix<float, 5, 1> getControlParameterVector()
    {
        Eigen::Matrix<float, 5, 1> L;
        //L << 9.940239281724569, 1.3586010780478561, -0.03237764040441623, -0.03237764040441623 * 10, 4;
        L << 14.865806368082696, 2.0623236695442064, -0.07122297702645312, -0.07122297702645312 * 10, 6;
        //L << 19.76190853507559, 2.7501424347363677, -0.12380201903044662, -0.12380201903044662 * 10, 8;
        //L << 24.628722042909875, 3.422417759025543, -0.18915403084733035, -0.18915403084733035 * 10, 12;
        //L << 57.89092015732856, 7.721727677879117, -0.9336154818877859, -0.9336154818877859 * 10, 12;
        //L << 94.23296940236878, 11.862863259936727, -2.185085156962166, -2.185085156962166 * 10, 12;

        return L;
    }

    class KalmanFilter
    {
      public:
        static Eigen::Vector3f getKVector()
        {
            Eigen::Vector3f K;
            
            //K << 0.09799424580193117,
            //    2.4964409292865963,
            //    0.5652699951929046;

            //K << 0.16531265413057228,
            //    7.247273820257207,
            //    2.5269719748600346;

            //K << 0.1983825910518331,
            //    10.478680647096779,
            //    4.291072093854287;

            //K << 0.32684007265646386,
            //    28.567812385253276,
            //    18.53313095588553;

            //K << 0.3888374995706161,
            //    40.40850366768767,
            //    30.93862171115473;

            //K << 0.4791413260700308,
            //    61.21885215942826,
            //    57.39263621353391;

            //K << 0.5085413648625792,
            //    68.89605951297686,
            //    68.47216577817979;

            //K << 0.622743534980963,
            //    102.86198025189901,
            //    124.93406815357332;

            // 30 * 4 * 2 pole
            //K << 0.7316969391112194,
            //    141.316769493361,
            //    201.79065187534968;

            // 60 * 4 * 2 pole
            K << 1.2879572201280896,
                425.2887752180842,
                1089.0860221513021;

            // 100 * 4 * 2 pole
            //K << 1.8229097365190623,
            //    825.8706566376411,
            //    3075.4863531454275;

            return K;
        }


        static Eigen::Matrix3f getAMatrix()
        {
            Eigen::Matrix3f A;
            A << 1.0, 0.0012, 3.6719999999999994e-05,
            0.0, 0.994, 0.0612,
            0.0, 0.0, 1.0;

            return A;
        }

        static Eigen::Matrix3f getAInvMatrix()
        {
            Eigen::Matrix3f AInv;

            AInv << 1.0, -0.0012072434607645873, 3.7163299798792755e-05,
                0.0, 1.0060362173038229, -0.06156941649899396,
                0.0, 0.0, 1.0;

            return AInv;
        }

        static Eigen::Vector3f getBVector()
        {
            Eigen::Vector3f B;

            B << 3.6719999999999994e-05,
                0.0612,
                0.0;

            return B;
        }
    };
};

#endif
