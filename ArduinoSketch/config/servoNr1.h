#include <Eigen.h>
#include "../EncoderHandler.h"
#include "../CurrentControlLoop.h"
#include "../OpticalEncoderHandler.h"
#include "../ArduinoC++BugFixes.h"
#include "../CommunicationHandlers.h"

#ifndef CONFIG_HOLDER_H
#define CONFIG_HOLDER_H

class ConfigHolder
{
public:
    static constexpr float getMainEncoderGearRation()
    {
        return 275.0 / 125904.0;
    }

    static std::unique_ptr<CurrentController> createCurrentController()
    {
        constexpr float pwmToStallCurrent{2.61598722};
        constexpr float backEmfCurrent{-0.70435649 * 2 * 3.1415926535897932384626433832795028841972 / 4096.0};

        return std::make_unique<CurrentControlModel>(pwmToStallCurrent, backEmfCurrent);
    }

    static std::unique_ptr<OpticalEncoderHandler> createMainEncoderHandler()
    {
        std::array<uint16_t, 512> aVec = {2438, 2447, 2465, 2476, 2485, 2500, 2526, 2560, 2585, 2598, 2613, 2628, 2646, 2658, 2665, 2677, 2689, 2705, 2720, 2743, 2765, 2778, 2795, 2814, 2847, 2868, 2878, 2890, 2905, 2921, 2944, 2960, 2971, 2983, 2992, 2998, 3017, 3031, 3051, 3066, 3077, 3084, 3093, 3103, 3111, 3125, 3135, 3149, 3160, 3174, 3185, 3194, 3211, 3231, 3239, 3247, 3256, 3268, 3284, 3290, 3302, 3311, 3324, 3330, 3339, 3349, 3355, 3361, 3368, 3376, 3385, 3393, 3401, 3409, 3418, 3427, 3438, 3449, 3456, 3460, 3464, 3474, 3485, 3493, 3502, 3509, 3515, 3522, 3532, 3538, 3543, 3549, 3554, 3558, 3561, 3565, 3573, 3573, 3576, 3578, 3584, 3588, 3592, 3596, 3600, 3606, 3611, 3614, 3618, 3621, 3625, 3630, 3634, 3638, 3641, 3645, 3652, 3657, 3657, 3660, 3663, 3668, 3672, 3675, 3677, 3682, 3684, 3694, 3688, 3690, 3693, 3696, 3699, 3702, 3706, 3708, 3709, 3711, 3714, 3715, 3718, 3720, 3722, 3726, 3730, 3731, 3734, 3737, 3739, 3744, 3744, 3748, 3749, 3750, 3751, 3753, 3754, 3755, 3757, 3760, 3762, 3763, 3765, 3765, 3766, 3766, 3766, 3767, 3767, 3769, 3769, 3770, 3772, 3772, 3773, 3774, 3775, 3776, 3777, 3778, 3779, 3780, 3780, 3781, 3782, 3782, 3783, 3783, 3783, 3784, 3784, 3784, 3784, 3783, 3783, 3781, 3780, 3780, 3779, 3777, 3777, 3776, 3774, 3774, 3772, 3770, 3768, 3765, 3764, 3763, 3763, 3761, 3759, 3758, 3756, 3754, 3752, 3750, 3748, 3746, 3744, 3742, 3740, 3739, 3735, 3733, 3731, 3728, 3726, 3722, 3720, 3719, 3718, 3716, 3713, 3711, 3707, 3704, 3704, 3701, 3698, 3695, 3691, 3688, 3686, 3684, 3679, 3677, 3675, 3671, 3669, 3667, 3665, 3660, 3656, 3652, 3649, 3642, 3636, 3633, 3626, 3620, 3614, 3607, 3604, 3599, 3589, 3585, 3579, 3573, 3569, 3562, 3558, 3556, 3552, 3547, 3542, 3540, 3534, 3529, 3524, 3516, 3511, 3498, 3496, 3486, 3477, 3468, 3457, 3445, 3431, 3417, 3412, 3404, 3400, 3377, 3357, 3333, 3343, 3330, 3295, 3288, 3267, 3249, 3235, 3215, 3192, 3168, 3159, 3109, 3120, 3106, 3093, 3075, 3050, 3026, 3005, 2982, 2968, 2942, 2926, 2913, 2895, 2876, 2863, 2848, 2831, 2820, 2777, 2771, 2786, 2764, 2741, 2727, 2720, 2712, 2680, 2672, 2655, 2641, 2630, 2615, 2601, 2582, 2556, 2541, 2523, 2504, 2488, 2478, 2448, 2439, 2425, 2411, 2390, 2365, 2343, 2322, 2299, 2277, 2261, 2242, 2218, 2203, 2177, 2171, 2158, 2131, 2114, 2094, 2074, 2059, 2041, 2021, 1990, 1960, 1942, 1914, 1898, 1884, 1866, 1853, 1834, 1807, 1801, 1780, 1775, 1764, 1747, 1729, 1718, 1704, 1690, 1682, 1666, 1652, 1631, 1614, 1592, 1586, 1574, 1556, 1544, 1519, 1509, 1481, 1494, 1484, 1468, 1449, 1432, 1418, 1419, 1405, 1400, 1397, 1393, 1399, 1396, 1399, 1406, 1411, 1422, 1411, 1403, 1405, 1411, 1426, 1432, 1434, 1448, 1452, 1455, 1462, 1473, 1475, 1490, 1501, 1513, 1518, 1532, 1545, 1547, 1558, 1569, 1561, 1568, 1578, 1586, 1585, 1595, 1596, 1604, 1629, 1626, 1621, 1641, 1652, 1666, 1674, 1688, 1703, 1716, 1729, 1746, 1754, 1761, 1772, 1782, 1795, 1810, 1817, 1828, 1839, 1853, 1875, 1889, 1907, 1927, 1937, 1947, 1954, 1966, 1975, 1986, 1995, 2012, 2044, 2060, 2071, 2085, 2102, 2110, 2128, 2141, 2149, 2155, 2167, 2189, 2208, 2220, 2231, 2243, 2260, 2290, 2318, 2333, 2351, 2371, 2396, 2414, 2423};
        std::array<uint16_t, 512> bVec = {3875, 3876, 3877, 3879, 3880, 3881, 3883, 3886, 3887, 3889, 3890, 3891, 3892, 3893, 3894, 3894, 3896, 3897, 3898, 3901, 3904, 3905, 3907, 3910, 3913, 3914, 3914, 3916, 3917, 3918, 3920, 3921, 3921, 3922, 3922, 3922, 3923, 3924, 3924, 3925, 3925, 3924, 3925, 3926, 3926, 3927, 3926, 3928, 3928, 3930, 3930, 3930, 3932, 3935, 3935, 3936, 3936, 3938, 3938, 3939, 3940, 3941, 3942, 3942, 3942, 3942, 3943, 3943, 3944, 3943, 3944, 3943, 3943, 3944, 3943, 3942, 3942, 3941, 3939, 3940, 3939, 3938, 3937, 3936, 3935, 3934, 3935, 3934, 3932, 3932, 3931, 3930, 3929, 3930, 3929, 3928, 3927, 3925, 3925, 3924, 3923, 3922, 3921, 3918, 3918, 3916, 3913, 3913, 3912, 3911, 3910, 3909, 3907, 3907, 3906, 3904, 3903, 3899, 3900, 3899, 3898, 3894, 3892, 3891, 3889, 3885, 3885, 3879, 3881, 3882, 3878, 3873, 3870, 3867, 3864, 3860, 3856, 3854, 3849, 3846, 3842, 3838, 3832, 3827, 3826, 3823, 3820, 3818, 3816, 3813, 3811, 3809, 3807, 3806, 3804, 3801, 3799, 3796, 3788, 3778, 3768, 3759, 3744, 3737, 3734, 3730, 3722, 3714, 3704, 3694, 3684, 3674, 3663, 3655, 3641, 3628, 3616, 3606, 3584, 3572, 3564, 3553, 3546, 3532, 3514, 3505, 3495, 3482, 3459, 3428, 3414, 3404, 3392, 3380, 3364, 3348, 3335, 3324, 3317, 3299, 3287, 3280, 3270, 3261, 3244, 3227, 3213, 3195, 3182, 3175, 3165, 3150, 3139, 3126, 3107, 3091, 3081, 3062, 3045, 3026, 3015, 2999, 2989, 2974, 2949, 2932, 2914, 2900, 2879, 2861, 2849, 2837, 2824, 2808, 2785, 2760, 2737, 2720, 2710, 2694, 2674, 2651, 2630, 2606, 2588, 2574, 2555, 2542, 2525, 2506, 2488, 2476, 2463, 2434, 2402, 2385, 2372, 2344, 2321, 2303, 2277, 2263, 2244, 2223, 2214, 2198, 2172, 2160, 2141, 2121, 2109, 2099, 2086, 2076, 2069, 2060, 2050, 2038, 2029, 2013, 1996, 1984, 1967, 1959, 1954, 1951, 1944, 1943, 1937, 1940, 1940, 1939, 1934, 1934, 1945, 1947, 1948, 1965, 1953, 1957, 1972, 1971, 1975, 1988, 1994, 2000, 2014, 2026, 2032, 2050, 2055, 2060, 2059, 2069, 2080, 2091, 2098, 2107, 2113, 2125, 2135, 2135, 2141, 2150, 2163, 2162, 2175, 2183, 2206, 2204, 2206, 2220, 2231, 2238, 2240, 2253, 2275, 2285, 2292, 2308, 2316, 2327, 2334, 2359, 2383, 2393, 2408, 2423, 2428, 2443, 2462, 2470, 2483, 2491, 2508, 2524, 2542, 2557, 2576, 2587, 2597, 2613, 2629, 2643, 2657, 2664, 2672, 2691, 2702, 2718, 2732, 2740, 2755, 2773, 2796, 2819, 2834, 2854, 2867, 2880, 2893, 2904, 2921, 2942, 2948, 2960, 2974, 2974, 2993, 3009, 3022, 3033, 3045, 3056, 3068, 3078, 3096, 3115, 3138, 3134, 3151, 3166, 3178, 3202, 3209, 3240, 3230, 3248, 3260, 3274, 3301, 3312, 3323, 3332, 3373, 3372, 3385, 3412, 3417, 3410, 3422, 3454, 3485, 3451, 3445, 3456, 3472, 3479, 3496, 3517, 3525, 3536, 3542, 3551, 3551, 3562, 3573, 3582, 3593, 3607, 3613, 3620, 3630, 3636, 3643, 3646, 3652, 3656, 3657, 3666, 3666, 3678, 3678, 3699, 3693, 3699, 3714, 3718, 3726, 3729, 3737, 3744, 3752, 3756, 3760, 3767, 3768, 3773, 3774, 3778, 3783, 3785, 3787, 3790, 3794, 3799, 3801, 3804, 3808, 3809, 3811, 3814, 3816, 3817, 3818, 3820, 3822, 3827, 3828, 3830, 3832, 3835, 3836, 3839, 3841, 3841, 3843, 3845, 3847, 3848, 3851, 3853, 3854, 3856, 3859, 3863, 3863, 3866, 3867, 3871, 3872, 3873};
    
        return std::make_unique<OpticalEncoderHandler>(aVec, bVec);
    }

    static std::unique_ptr<EncoderHandlerInterface> createOutputEncoderHandler()
    {
        return std::make_unique<EncoderHandler>(A5);
    }

    static std::unique_ptr<Communication> getCommunicationHandler()
    {
        auto com = std::make_unique<Communication>(&Serial1, 115200);
        com->addCommunicationNode(std::make_unique<DCServoCommunicationHandler>(1));

        return com;
    }

    static Eigen::Matrix<float, 5, 1> getControlParameterVector()
    {
        Eigen::Matrix<float, 5, 1> L;
        //L << 9.940239281724569, 1.3586010780478561, -0.03237764040441623, -0.03237764040441623 * 10, 1;
        //L << 14.865806368082696, 2.0623236695442064, -0.07122297702645312, -0.07122297702645312 * 10, 2;
        //L << 19.76190853507559, 2.7501424347363677, -0.12380201903044662, -0.12380201903044662 * 10, 4;
        //L << 24.628722042909875, 3.422417759025543, -0.18915403084733035, -0.18915403084733035 * 10, 6;
        //L << 39.05517743541272, 5.349465233936552, -0.4529865426450321, -0.4529865426450321 * 10, 8;
        L << 48.529555346459404, 6.562693416014962, -0.6772985973618402, -0.6772985973618402 * 10, 10;
        //L << 57.89092015732856, 7.721727677879117, -0.9336154818877859, -0.9336154818877859 * 10, 12;
        //L << 94.23296940236878, 11.862863259936727, -2.185085156962166, -2.185085156962166 * 10, 12;

        return L;
    }

    class KalmanFilter
    {
      public:
        static Eigen::Vector3f getKVector()
        {
            Eigen::Vector3f K;
            
            //K << 0.09799424580193117,
            //    2.4964409292865963,
            //    0.5652699951929046;

            //K << 0.16531265413057228,
            //    7.247273820257207,
            //    2.5269719748600346;

            //K << 0.1983825910518331,
            //    10.478680647096779,
            //    4.291072093854287;

            //K << 0.32684007265646386,
            //    28.567812385253276,
            //    18.53313095588553;

            //K << 0.3888374995706161,
            //    40.40850366768767,
            //    30.93862171115473;

            //K << 0.4791413260700308,
            //    61.21885215942826,
            //    57.39263621353391;

            //K << 0.5085413648625792,
            //    68.89605951297686,
            //    68.47216577817979;

            //K << 0.622743534980963,
            //    102.86198025189901,
            //    124.93406815357332;

            // 30 * 4 * 2 pole
            //K << 0.7316969391112194,
            //    141.316769493361,
            //    201.79065187534968;

            // 40 * 4 * 2 pole
            //K << 0.9348115489458093,
            //    228.36239777968316,
            //    418.58900807416495;

            // 50 * 4 * 2 pole
            K << 1.1196854711621897,
                324.4212488665876,
                717.0390978029607;

            // 60 * 4 * 2 pole
            //K << 1.2879572201280896,
            //    425.2887752180842,
            //    1089.0860221513021;

            // 100 * 4 * 2 pole
            //K << 1.8229097365190623,
            //    825.8706566376411,
            //    3075.4863531454275;

            return K;
        }


        static Eigen::Matrix3f getAMatrix()
        {
            Eigen::Matrix3f A;
            A << 1.0, 0.0012, 3.6719999999999994e-05,
            0.0, 0.994, 0.0612,
            0.0, 0.0, 1.0;

            return A;
        }

        static Eigen::Matrix3f getAInvMatrix()
        {
            Eigen::Matrix3f AInv;

            AInv << 1.0, -0.0012072434607645873, 3.7163299798792755e-05,
                0.0, 1.0060362173038229, -0.06156941649899396,
                0.0, 0.0, 1.0;

            return AInv;
        }

        static Eigen::Vector3f getBVector()
        {
            Eigen::Vector3f B;

            B << 3.6719999999999994e-05,
                0.0612,
                0.0;

            return B;
        }
    };
};

#endif
