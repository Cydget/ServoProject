#include "../defaultConfigHolder.h"

#ifndef CONFIG_HOLDER_H
#define CONFIG_HOLDER_H

// replace with gear ratio from motor to output
constexpr float mainEncoderGearRatio{275.0 / 125904.0};

// replace with generated output from systemIdent.py
// vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// config setps
// x 1) disconnect motor from gearbox
// x 2) compile and transfer to servo nr x
// x 3) open MasterCommunication folder in terminal
// x 4) run 'make'
// x 5) run './executable --servoNr x --recOpticalEncoder --output=opticalEncoderData.txt'
// x 6) run './systemIdent.py --opticalEncoderDataFile=opticalEncoderData.txt'
// x 7) copy past new generated ConfigHolder class, from terminal, over old class
// x 8) compile and transfer to servo nr x with new ConfigHolder class
// x 9) run './executable --servoNr x --recSystemIdentData --output=systemIdentData.txt'
// x 10) run './systemIdent.py --opticalEncoderDataFile=opticalEncoderData.txt --systemIdentDataFile=systemIdentData.txt'
// x 11) copy past new generated ConfigHolder class, from terminal, over old class
// x 12) connect motor to gearbox again
// x 13) compile and transfer to servo nr x with new ConfigHolder class
class SetupConfigHolder : public DefaultConfigHolder
{
public:
    static std::unique_ptr<OpticalEncoderHandler> createMainEncoderHandler()
    {
        std::array<uint16_t, 512> aVec = {1826, 1820, 1838, 1850, 1861, 1868, 1876, 1884, 1889, 1896, 1901, 1905, 1913, 1918, 1922, 1928, 1934, 1943, 1949, 1954, 1961, 1968, 1977, 1984, 2006, 2027, 2034, 2042, 2055, 2064, 2069, 2078, 2093, 2107, 2122, 2130, 2146, 2159, 2167, 2174, 2182, 2194, 2208, 2223, 2244, 2261, 2274, 2282, 2288, 2301, 2316, 2340, 2357, 2372, 2383, 2392, 2398, 2405, 2420, 2437, 2451, 2461, 2476, 2498, 2514, 2533, 2547, 2566, 2582, 2596, 2621, 2634, 2649, 2663, 2674, 2684, 2702, 2719, 2729, 2735, 2742, 2755, 2773, 2786, 2803, 2823, 2844, 2855, 2864, 2879, 2893, 2912, 2925, 2936, 2946, 2958, 2973, 2990, 3008, 3018, 3026, 3034, 3049, 3059, 3070, 3082, 3105, 3115, 3128, 3144, 3157, 3166, 3178, 3186, 3193, 3210, 3220, 3232, 3244, 3254, 3262, 3269, 3277, 3288, 3301, 3315, 3332, 3343, 3354, 3363, 3371, 3379, 3390, 3397, 3412, 3416, 3423, 3426, 3436, 3443, 3450, 3459, 3468, 3479, 3485, 3491, 3502, 3508, 3517, 3525, 3535, 3544, 3551, 3561, 3568, 3572, 3582, 3589, 3596, 3602, 3607, 3609, 3617, 3622, 3625, 3629, 3632, 3636, 3638, 3639, 3643, 3649, 3652, 3656, 3660, 3666, 3668, 3671, 3674, 3677, 3679, 3682, 3684, 3687, 3690, 3692, 3695, 3699, 3701, 3705, 3709, 3712, 3712, 3716, 3719, 3720, 3723, 3726, 3730, 3733, 3736, 3739, 3741, 3741, 3743, 3744, 3746, 3747, 3751, 3753, 3755, 3757, 3760, 3762, 3764, 3765, 3767, 3768, 3771, 3774, 3776, 3779, 3782, 3784, 3787, 3789, 3791, 3792, 3793, 3793, 3795, 3796, 3797, 3797, 3797, 3798, 3800, 3798, 3801, 3801, 3802, 3802, 3802, 3803, 3803, 3804, 3806, 3806, 3808, 3810, 3810, 3810, 3812, 3812, 3814, 3814, 3814, 3813, 3816, 3815, 3816, 3815, 3816, 3816, 3815, 3815, 3814, 3814, 3812, 3812, 3809, 3809, 3808, 3805, 3805, 3804, 3803, 3800, 3800, 3798, 3798, 3796, 3795, 3793, 3792, 3791, 3789, 3787, 3786, 3783, 3782, 3780, 3778, 3776, 3775, 3771, 3770, 3766, 3763, 3762, 3760, 3757, 3755, 3754, 3751, 3745, 3742, 3739, 3736, 3734, 3734, 3728, 3725, 3721, 3718, 3718, 3714, 3711, 3708, 3704, 3697, 3694, 3690, 3687, 3682, 3678, 3673, 3668, 3661, 3656, 3651, 3647, 3641, 3637, 3632, 3630, 3625, 3623, 3616, 3613, 3609, 3608, 3604, 3598, 3592, 3587, 3585, 3580, 3573, 3567, 3564, 3557, 3549, 3538, 3534, 3526, 3522, 3513, 3504, 3489, 3478, 3470, 3466, 3453, 3445, 3434, 3418, 3405, 3399, 3390, 3374, 3356, 3344, 3326, 3315, 3298, 3286, 3278, 3268, 3259, 3248, 3232, 3219, 3206, 3186, 3168, 3155, 3138, 3124, 3112, 3097, 3089, 3076, 3060, 3042, 3026, 3012, 3000, 2988, 2978, 2960, 2937, 2917, 2900, 2873, 2864, 2858, 2835, 2818, 2805, 2786, 2772, 2762, 2750, 2728, 2721, 2710, 2702, 2701, 2693, 2673, 2637, 2621, 2602, 2585, 2574, 2563, 2553, 2535, 2525, 2510, 2489, 2472, 2456, 2434, 2414, 2390, 2372, 2357, 2340, 2328, 2311, 2297, 2287, 2274, 2264, 2251, 2239, 2230, 2208, 2190, 2172, 2157, 2142, 2132, 2116, 2098, 2086, 2069, 2052, 2024, 1994, 1982, 1969, 1954, 1937, 1930, 1918, 1906, 1891, 1876, 1865, 1857, 1839, 1823, 1811, 1794, 1784, 1776, 1765, 1755, 1743, 1734, 1732, 1727, 1720, 1724, 1723, 1720, 1721, 1724, 1717, 1724, 1730, 1728, 1734, 1737, 1738, 1743, 1748, 1750, 1754, 1758, 1764, 1766, 1773, 1776, 1783, 1786, 1795, 1801, 1808};
        std::array<uint16_t, 512> bVec = {3624, 3628, 3643, 3658, 3661, 3671, 3676, 3686, 3694, 3697, 3705, 3708, 3712, 3717, 3723, 3730, 3736, 3739, 3746, 3750, 3752, 3759, 3765, 3768, 3777, 3791, 3792, 3796, 3801, 3807, 3808, 3810, 3815, 3817, 3823, 3825, 3828, 3832, 3833, 3834, 3838, 3838, 3841, 3844, 3847, 3850, 3851, 3853, 3853, 3856, 3858, 3862, 3864, 3866, 3867, 3869, 3870, 3870, 3872, 3873, 3876, 3877, 3880, 3881, 3882, 3883, 3885, 3889, 3888, 3891, 3894, 3895, 3896, 3898, 3898, 3900, 3901, 3902, 3903, 3904, 3904, 3905, 3905, 3906, 3908, 3909, 3912, 3912, 3913, 3914, 3916, 3918, 3920, 3920, 3922, 3924, 3925, 3927, 3930, 3930, 3931, 3931, 3932, 3933, 3933, 3935, 3935, 3935, 3937, 3936, 3936, 3937, 3937, 3937, 3938, 3938, 3938, 3940, 3940, 3940, 3941, 3941, 3941, 3942, 3945, 3945, 3947, 3948, 3948, 3950, 3950, 3951, 3952, 3954, 3953, 3954, 3954, 3954, 3955, 3954, 3953, 3956, 3953, 3955, 3955, 3954, 3954, 3953, 3952, 3952, 3950, 3950, 3948, 3947, 3947, 3945, 3944, 3945, 3944, 3943, 3942, 3942, 3940, 3939, 3938, 3938, 3937, 3937, 3936, 3934, 3933, 3931, 3931, 3930, 3928, 3926, 3925, 3924, 3923, 3922, 3921, 3920, 3918, 3919, 3918, 3917, 3914, 3913, 3914, 3910, 3909, 3908, 3908, 3906, 3904, 3901, 3900, 3898, 3895, 3892, 3889, 3884, 3883, 3881, 3880, 3877, 3873, 3871, 3866, 3860, 3857, 3853, 3850, 3846, 3844, 3840, 3839, 3837, 3832, 3830, 3828, 3825, 3823, 3819, 3817, 3813, 3809, 3806, 3803, 3799, 3794, 3788, 3785, 3782, 3776, 3768, 3759, 3748, 3739, 3733, 3728, 3722, 3717, 3711, 3703, 3693, 3683, 3671, 3658, 3641, 3637, 3628, 3618, 3607, 3595, 3580, 3574, 3567, 3543, 3523, 3506, 3490, 3479, 3470, 3458, 3448, 3438, 3431, 3415, 3406, 3391, 3381, 3367, 3351, 3342, 3336, 3330, 3318, 3307, 3301, 3290, 3281, 3269, 3256, 3248, 3239, 3224, 3207, 3195, 3185, 3172, 3158, 3149, 3138, 3118, 3104, 3094, 3071, 3053, 3045, 3038, 3024, 3008, 2996, 2980, 2944, 2925, 2908, 2882, 2866, 2845, 2825, 2807, 2791, 2778, 2765, 2749, 2734, 2717, 2692, 2667, 2636, 2618, 2602, 2582, 2567, 2540, 2527, 2505, 2492, 2480, 2466, 2451, 2436, 2428, 2420, 2407, 2402, 2387, 2374, 2366, 2360, 2349, 2335, 2320, 2311, 2302, 2295, 2282, 2265, 2254, 2243, 2232, 2224, 2214, 2215, 2209, 2214, 2208, 2210, 2211, 2209, 2217, 2216, 2224, 2224, 2232, 2236, 2241, 2244, 2251, 2255, 2264, 2272, 2274, 2281, 2289, 2295, 2297, 2301, 2310, 2316, 2325, 2328, 2337, 2346, 2352, 2359, 2363, 2372, 2375, 2378, 2382, 2389, 2396, 2398, 2408, 2415, 2419, 2422, 2431, 2442, 2452, 2462, 2479, 2483, 2491, 2500, 2513, 2522, 2535, 2546, 2553, 2562, 2577, 2584, 2593, 2596, 2604, 2605, 2621, 2646, 2656, 2673, 2685, 2692, 2701, 2709, 2723, 2727, 2740, 2754, 2763, 2777, 2794, 2808, 2824, 2838, 2852, 2860, 2871, 2882, 2896, 2899, 2908, 2917, 2926, 2934, 2941, 2958, 2971, 2987, 2998, 3012, 3017, 3030, 3044, 3055, 3069, 3086, 3108, 3131, 3146, 3156, 3169, 3185, 3195, 3202, 3215, 3224, 3240, 3250, 3261, 3274, 3291, 3304, 3321, 3329, 3340, 3355, 3366, 3382, 3387, 3402, 3413, 3420, 3431, 3440, 3446, 3454, 3465, 3468, 3482, 3481, 3490, 3501, 3509, 3517, 3524, 3527, 3537, 3547, 3552, 3562, 3571, 3578, 3584, 3588, 3596, 3600, 3609, 3614};
        return std::make_unique<OpticalEncoderHandler>(aVec, bVec, A2, A3, 4096.0 * mainEncoderGearRatio);
    }

    static std::unique_ptr<CurrentController> createCurrentController()
    {
        constexpr float pwmToStallCurrent{2.879142394952704};
        constexpr float backEmfCurrent{-0.0005036711871589321};

        return std::make_unique<CurrentControlModel>(pwmToStallCurrent, backEmfCurrent);
    }

    class ControlParameters : public SetupConfigHolder::DefaultControlParameters
    {
      public:
        //kalman filter observer vector
        static Eigen::Vector3f getKVector()
        {
            Eigen::Vector3f K;
            K << 1.292427046282098,
                430.0061051468128,
                1115.7584415390818 * 2;

            return K;
        }

        //system model A matrix
        static Eigen::Matrix3f getAMatrix()
        {
            Eigen::Matrix3f A;
            A << 1.0, 0.0012, 3.59222444222646e-05 / 2,
                0.0, 0.9984698247019959, 0.059870407370441005 / 2,
                0.0, 0.0, 1.0;

            return A;
        }

        //system model invers A matrix
        static Eigen::Matrix3f getAInvMatrix()
        {
            Eigen::Matrix3f AInv;
            AInv << 1.0, -0.0012018390243872946, 3.6032347561496114e-05 / 2,
                0.0, 1.0015325203227456, -0.05996215998646726 / 2,
                0.0, 0.0, 1.0;

            return AInv;
        }

        //system model B matrix
        static Eigen::Vector3f getBVector()
        {
            Eigen::Vector3f B;
            B << 3.59222444222646e-05 / 2,
                0.059870407370441005 / 2,
                0.0;

            return B;
        }
    };
};
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

class ConfigHolder : public SetupConfigHolder
{
public:
    static std::unique_ptr<Communication> getCommunicationHandler()
    {
        auto com = std::make_unique<Communication>(&Serial1, 115200);
        com->addCommunicationNode(
                std::make_unique<DCServoCommunicationHandler>(1, createDCServo<ConfigHolder>()));

        return com;
    }
};

#endif
