#ifndef CONFIG_HOLDER_H
#define CONFIG_HOLDER_H

#include "../defaultConfigHolder.h"
#include "../ResistiveEncoderHandler.h"
#include "../DCServo.h"

// replace with gear ratio from motor to output
constexpr float mainEncoderGearRatio{9.0 / 48.0 * 10.0 / 38.0 * 10.0 / 38.0 * 10.0 / 38.0};

// replace with generated output from systemIdent.py
// vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// config setps
// x 1) disconnect motor from gearbox
// x 2) compile and transfer to servo nr x
// x 3) open MasterCommunication folder in terminal
// x 4) run 'make'
// x 5) run './executable --servoNr x --recOpticalEncoder --output=opticalEncoderData.txt'
// x 6) run './systemIdent.py --opticalEncoderDataFile=opticalEncoderData.txt'
// x 7) copy past new generated ConfigHolder class, from terminal, over old class
// x 8) compile and transfer to servo nr x with new ConfigHolder class
// x 9) run './executable --servoNr x --recSystemIdentData --output=systemIdentData.txt'
// x 10) run './systemIdent.py --opticalEncoderDataFile=opticalEncoderData.txt --systemIdentDataFile=systemIdentData.txt'
// x 11) copy past new generated ConfigHolder class, from terminal, over old class
// x 12) connect motor to gearbox again
// x 13) compile and transfer to servo nr x with new ConfigHolder class
class SetupConfigHolder : public DefaultConfigHolder
{
public:
    static std::unique_ptr<OpticalEncoderHandler> createMainEncoderHandler()
    {
        std::array<uint16_t, 512> aVec = {3062, 3058, 3054, 3049, 3044, 3040, 3036, 3033, 3030, 3026, 3023, 3020, 3017, 3013, 3011, 3006, 3002, 2998, 2995, 2991, 2988, 2985, 2981, 2978, 2974, 2972, 2967, 2964, 2959, 2955, 2951, 2947, 2944, 2941, 2937, 2933, 2930, 2925, 2922, 2917, 2913, 2908, 2905, 2901, 2897, 2893, 2890, 2885, 2882, 2877, 2871, 2867, 2863, 2859, 2854, 2851, 2847, 2844, 2840, 2836, 2832, 2828, 2823, 2818, 2814, 2810, 2807, 2802, 2798, 2793, 2789, 2785, 2781, 2776, 2772, 2767, 2763, 2759, 2755, 2751, 2745, 2741, 2738, 2734, 2731, 2727, 2723, 2720, 2716, 2712, 2708, 2704, 2700, 2696, 2692, 2688, 2685, 2682, 2678, 2675, 2672, 2669, 2666, 2663, 2660, 2657, 2654, 2652, 2649, 2646, 2643, 2641, 2638, 2635, 2632, 2630, 2628, 2625, 2624, 2621, 2620, 2617, 2617, 2615, 2613, 2611, 2610, 2609, 2608, 2607, 2606, 2604, 2603, 2602, 2602, 2601, 2600, 2600, 2599, 2598, 2598, 2597, 2597, 2597, 2597, 2596, 2596, 2596, 2596, 2596, 2597, 2597, 2598, 2598, 2599, 2600, 2601, 2602, 2603, 2605, 2606, 2607, 2608, 2610, 2612, 2614, 2615, 2617, 2619, 2621, 2622, 2624, 2626, 2629, 2631, 2633, 2635, 2637, 2640, 2642, 2645, 2647, 2650, 2652, 2655, 2659, 2661, 2664, 2667, 2669, 2673, 2676, 2679, 2682, 2686, 2689, 2692, 2695, 2699, 2702, 2705, 2709, 2713, 2716, 2720, 2725, 2728, 2732, 2736, 2741, 2744, 2747, 2751, 2755, 2760, 2763, 2767, 2771, 2776, 2780, 2784, 2787, 2791, 2795, 2799, 2803, 2807, 2810, 2816, 2820, 2825, 2828, 2833, 2837, 2841, 2845, 2849, 2853, 2857, 2861, 2866, 2870, 2875, 2879, 2883, 2887, 2892, 2895, 2900, 2905, 2909, 2913, 2916, 2921, 2925, 2928, 2931, 2934, 2939, 2944, 2948, 2953, 2956, 2960, 2964, 2968, 2971, 2975, 2979, 2982, 2987, 2990, 2994, 2997, 3001, 3005, 3008, 3013, 3017, 3021, 3025, 3028, 3032, 3036, 3040, 3043, 3046, 3051, 3054, 3058, 3060, 3063, 3067, 3070, 3073, 3077, 3080, 3083, 3087, 3090, 3094, 3097, 3101, 3104, 3107, 3110, 3114, 3116, 3118, 3121, 3126, 3129, 3131, 3134, 3137, 3140, 3142, 3145, 3147, 3150, 3153, 3156, 3158, 3161, 3163, 3166, 3169, 3172, 3174, 3177, 3179, 3182, 3184, 3186, 3188, 3190, 3192, 3194, 3196, 3197, 3199, 3200, 3202, 3205, 3207, 3208, 3210, 3211, 3213, 3214, 3215, 3217, 3218, 3220, 3221, 3223, 3224, 3225, 3226, 3227, 3228, 3229, 3230, 3231, 3232, 3233, 3234, 3235, 3236, 3236, 3237, 3238, 3238, 3239, 3240, 3240, 3241, 3241, 3241, 3242, 3242, 3243, 3243, 3243, 3244, 3244, 3244, 3244, 3244, 3245, 3245, 3245, 3245, 3245, 3245, 3245, 3246, 3245, 3245, 3245, 3245, 3245, 3244, 3244, 3244, 3244, 3243, 3243, 3243, 3242, 3242, 3241, 3241, 3240, 3240, 3239, 3239, 3238, 3237, 3236, 3235, 3235, 3234, 3233, 3232, 3231, 3230, 3229, 3228, 3228, 3226, 3225, 3224, 3223, 3222, 3221, 3220, 3218, 3218, 3216, 3215, 3214, 3212, 3211, 3210, 3209, 3207, 3205, 3204, 3202, 3200, 3198, 3198, 3196, 3195, 3193, 3191, 3190, 3188, 3186, 3184, 3183, 3181, 3180, 3178, 3176, 3174, 3172, 3170, 3168, 3166, 3164, 3162, 3160, 3158, 3156, 3155, 3153, 3151, 3149, 3147, 3145, 3143, 3141, 3139, 3136, 3134, 3132, 3129, 3127, 3125, 3122, 3119, 3117, 3115, 3112, 3110, 3106, 3104, 3102, 3099, 3096, 3094, 3091, 3088, 3085, 3083, 3080, 3076, 3074, 3070, 3067};
        std::array<uint16_t, 512> bVec = {3264, 3261, 3257, 3252, 3249, 3245, 3243, 3241, 3238, 3236, 3234, 3232, 3230, 3228, 3227, 3224, 3222, 3220, 3218, 3217, 3215, 3213, 3212, 3210, 3208, 3207, 3206, 3204, 3202, 3200, 3199, 3197, 3196, 3195, 3194, 3193, 3191, 3190, 3189, 3188, 3187, 3186, 3184, 3184, 3183, 3182, 3182, 3181, 3180, 3180, 3179, 3178, 3178, 3177, 3177, 3177, 3177, 3176, 3176, 3176, 3176, 3175, 3176, 3175, 3175, 3175, 3176, 3176, 3176, 3176, 3177, 3177, 3177, 3177, 3178, 3178, 3179, 3179, 3179, 3181, 3182, 3182, 3183, 3183, 3184, 3185, 3186, 3187, 3188, 3189, 3190, 3191, 3193, 3194, 3195, 3197, 3198, 3200, 3201, 3202, 3204, 3206, 3207, 3209, 3210, 3212, 3214, 3215, 3217, 3219, 3221, 3222, 3225, 3227, 3229, 3231, 3232, 3235, 3236, 3238, 3240, 3242, 3244, 3247, 3249, 3251, 3254, 3256, 3257, 3260, 3262, 3264, 3266, 3269, 3272, 3274, 3276, 3278, 3280, 3283, 3285, 3287, 3290, 3293, 3296, 3298, 3300, 3302, 3305, 3307, 3309, 3311, 3314, 3317, 3319, 3322, 3324, 3327, 3330, 3332, 3335, 3337, 3340, 3343, 3347, 3349, 3352, 3354, 3357, 3360, 3361, 3363, 3365, 3368, 3371, 3373, 3375, 3378, 3380, 3382, 3384, 3386, 3389, 3391, 3394, 3398, 3400, 3402, 3404, 3406, 3409, 3411, 3413, 3416, 3418, 3421, 3422, 3425, 3427, 3429, 3431, 3433, 3435, 3438, 3440, 3443, 3445, 3447, 3449, 3451, 3453, 3455, 3457, 3459, 3461, 3463, 3465, 3467, 3469, 3471, 3473, 3474, 3476, 3477, 3479, 3481, 3482, 3484, 3486, 3488, 3490, 3491, 3493, 3495, 3496, 3498, 3499, 3500, 3502, 3503, 3505, 3507, 3508, 3510, 3511, 3512, 3514, 3515, 3517, 3518, 3519, 3520, 3522, 3523, 3525, 3526, 3527, 3527, 3529, 3530, 3532, 3533, 3534, 3535, 3536, 3537, 3538, 3539, 3540, 3541, 3543, 3543, 3544, 3546, 3546, 3547, 3548, 3549, 3550, 3551, 3552, 3553, 3554, 3554, 3555, 3556, 3556, 3557, 3558, 3559, 3559, 3560, 3560, 3561, 3562, 3562, 3563, 3563, 3564, 3565, 3565, 3566, 3566, 3567, 3567, 3567, 3568, 3568, 3568, 3568, 3569, 3569, 3570, 3570, 3570, 3570, 3571, 3571, 3571, 3571, 3571, 3571, 3571, 3571, 3571, 3571, 3571, 3571, 3571, 3571, 3571, 3571, 3571, 3571, 3571, 3571, 3570, 3570, 3570, 3570, 3570, 3570, 3569, 3569, 3568, 3568, 3568, 3568, 3567, 3567, 3567, 3566, 3566, 3565, 3565, 3564, 3564, 3563, 3562, 3562, 3561, 3560, 3560, 3559, 3559, 3558, 3557, 3557, 3556, 3555, 3554, 3553, 3553, 3551, 3550, 3550, 3549, 3548, 3547, 3546, 3545, 3544, 3543, 3542, 3541, 3540, 3539, 3538, 3537, 3536, 3535, 3533, 3532, 3531, 3530, 3528, 3527, 3525, 3524, 3523, 3522, 3520, 3519, 3517, 3516, 3514, 3513, 3511, 3510, 3509, 3507, 3505, 3504, 3502, 3501, 3499, 3497, 3496, 3493, 3491, 3489, 3488, 3486, 3484, 3483, 3480, 3479, 3476, 3475, 3473, 3471, 3469, 3467, 3466, 3464, 3461, 3459, 3457, 3455, 3453, 3451, 3449, 3447, 3445, 3443, 3441, 3439, 3436, 3433, 3431, 3428, 3426, 3424, 3422, 3419, 3418, 3415, 3412, 3410, 3407, 3405, 3402, 3399, 3398, 3395, 3392, 3390, 3387, 3384, 3381, 3378, 3376, 3373, 3371, 3368, 3365, 3363, 3361, 3358, 3356, 3353, 3350, 3348, 3345, 3342, 3339, 3336, 3333, 3329, 3326, 3324, 3321, 3318, 3316, 3313, 3310, 3308, 3305, 3302, 3299, 3297, 3294, 3292, 3289, 3287, 3284, 3282, 3279, 3276, 3274, 3271, 3268};
        return std::make_unique<OpticalEncoderHandler>(aVec, bVec, A2, A1, 4096.0 * mainEncoderGearRatio);
    }

    static std::unique_ptr<EncoderHandlerInterface> createOutputEncoderHandler()
    {
        std::array<int16_t, 32> compVec = {90, 90, 90, 98, 104, 99, 87, 75, 66, 58, 47, 42, 30, 21, 7, -5, -15, -30, -50, -63, -77, -83, -87, -82, -87, -80, -73, -71, -79, -58, -40, -25};
        return std::make_unique<ResistiveEncoderHandler>(A0, 4096.0 * 200.0 / 360.0, compVec);
    }

    static std::unique_ptr<CurrentController> createCurrentController()
    {
        constexpr float pwmToStallCurrent{1.0};
        constexpr float backEmfCurrent{-1.6693232382199313e-05 * 2};

        return std::make_unique<CurrentControlModel>(pwmToStallCurrent, backEmfCurrent, std::make_unique<HBridge2WirePwm>(12, 11));
    }

    class ControlParameters : public SetupConfigHolder::DefaultControlParameters
    {
      public:
        //kalman filter observer vector
        static Eigen::Vector3f getKVector()
        {
            Eigen::Vector3f K;
            K << 2.011661941066074,
                493.0937878670418,
                103.38332707332667 * 2;

            return K;
        }

        //system model A matrix
        static Eigen::Matrix3f getAMatrix()
        {
            Eigen::Matrix3f A;
            A << 1.0, 0.0024, 0.0014842527435006162 / 2,
                0.0, 0.9819417628930723, 1.2368772862505137 / 2,
                0.0, 0.0, 1.0;

            return A;
        }

        //system model invers A matrix
        static Eigen::Matrix3f getAInvMatrix()
        {
            Eigen::Matrix3f AInv;
            AInv << 1.0, -0.0024441368018903024, 0.0015388445512464705 / 2,
                0.0, 1.0183903341209595, -1.2596238728112863 / 2,
                0.0, 0.0, 1.0;

            return AInv;
        }

        //system model B matrix
        static Eigen::Vector3f getBVector()
        {
            Eigen::Vector3f B;
            B << 0.0014842527435006162 / 2,
                1.2368772862505137 / 2,
                0.0;

            return B;
        }

        //system model friction comp value
        static float getFrictionComp()
        {
            return 62.79863496418996;
        }
    };
};
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

class ConfigHolder
{
public:
    static std::unique_ptr<Communication> getCommunicationHandler()
    {
        auto com = std::make_unique<Communication>(&Serial1, 115200);
        com->addCommunicationNode(
                std::make_unique<DCServoCommunicationHandler>(6, createDCServo<SetupConfigHolder>()));

        return com;
    }
};

#endif
