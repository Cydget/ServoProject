#ifndef CONFIG_HOLDER_H
#define CONFIG_HOLDER_H

#include "../defaultConfigHolder.h"
#include "../ResistiveEncoderHandler.h"
#include "../DCServo.h"

// replace with gear ratio from motor to output
constexpr float mainEncoderGearRatio{105.0 / 27968.0};

// replace with generated output from systemIdent.py
// vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
// config setps
// x 1) disconnect motor from gearbox
// x 2) compile and transfer to servo nr x
// x 3) open MasterCommunication folder in terminal
// x 4) run 'make'
// x 5) run './executable --servoNr x --recOpticalEncoder --output=opticalEncoderData.txt'
// x 6) run './systemIdent.py --opticalEncoderDataFile=opticalEncoderData.txt'
// x 7) copy past new generated ConfigHolder class, from terminal, over old class
// x 8) compile and transfer to servo nr x with new ConfigHolder class
// x 9) run './executable --servoNr x --recSystemIdentData --output=systemIdentData.txt'
// x 10) run './systemIdent.py --opticalEncoderDataFile=opticalEncoderData.txt --systemIdentDataFile=systemIdentData.txt'
// x 11) copy past new generated ConfigHolder class, from terminal, over old class
// x 12) connect motor to gearbox again
// x 13) compile and transfer to servo nr x with new ConfigHolder class
class SetupConfigHolder : public DefaultConfigHolder
{
public:
    static std::unique_ptr<OpticalEncoderHandler> createMainEncoderHandler()
    {
        std::array<uint16_t, 512> aVec = {3058, 3056, 3052, 3064, 3067, 3070, 3075, 3079, 3082, 3084, 3090, 3096, 3098, 3103, 3106, 3108, 3110, 3112, 3117, 3120, 3122, 3125, 3130, 3132, 3136, 3140, 3143, 3146, 3147, 3149, 3151, 3154, 3155, 3155, 3159, 3162, 3165, 3167, 3168, 3170, 3172, 3173, 3175, 3176, 3178, 3180, 3181, 3182, 3184, 3186, 3187, 3188, 3190, 3192, 3192, 3194, 3195, 3196, 3199, 3200, 3203, 3204, 3204, 3205, 3206, 3207, 3208, 3210, 3212, 3212, 3215, 3216, 3218, 3219, 3219, 3222, 3222, 3223, 3224, 3225, 3227, 3228, 3230, 3231, 3232, 3233, 3234, 3234, 3235, 3236, 3237, 3237, 3239, 3241, 3242, 3242, 3242, 3244, 3244, 3244, 3245, 3245, 3245, 3246, 3245, 3246, 3247, 3247, 3246, 3246, 3247, 3247, 3247, 3247, 3248, 3247, 3248, 3247, 3248, 3247, 3245, 3246, 3246, 3245, 3246, 3245, 3244, 3244, 3245, 3244, 3243, 3242, 3242, 3241, 3240, 3240, 3240, 3239, 3239, 3239, 3238, 3237, 3237, 3236, 3235, 3234, 3234, 3233, 3235, 3234, 3231, 3230, 3229, 3228, 3226, 3226, 3226, 3225, 3225, 3224, 3223, 3222, 3220, 3219, 3218, 3217, 3215, 3213, 3213, 3212, 3211, 3209, 3208, 3206, 3204, 3201, 3198, 3197, 3194, 3192, 3190, 3189, 3187, 3184, 3181, 3178, 3176, 3172, 3170, 3168, 3165, 3163, 3161, 3157, 3154, 3152, 3147, 3146, 3143, 3139, 3135, 3134, 3131, 3129, 3127, 3123, 3120, 3118, 3114, 3111, 3108, 3104, 3101, 3096, 3094, 3092, 3090, 3087, 3084, 3082, 3081, 3076, 3073, 3071, 3064, 3062, 3060, 3056, 3052, 3048, 3046, 3043, 3040, 3036, 3033, 3031, 3028, 3025, 3022, 3020, 3018, 3016, 3010, 3006, 3004, 3001, 2997, 2991, 2986, 2984, 2980, 2975, 2967, 2962, 2955, 2948, 2941, 2933, 2929, 2924, 2920, 2909, 2898, 2887, 2881, 2874, 2869, 2866, 2856, 2850, 2841, 2835, 2830, 2827, 2822, 2815, 2808, 2804, 2800, 2798, 2790, 2784, 2777, 2769, 2763, 2756, 2750, 2747, 2741, 2736, 2731, 2726, 2723, 2718, 2712, 2708, 2705, 2701, 2698, 2696, 2692, 2689, 2686, 2684, 2679, 2676, 2672, 2670, 2668, 2666, 2664, 2660, 2657, 2655, 2653, 2651, 2649, 2646, 2641, 2640, 2638, 2636, 2632, 2630, 2627, 2624, 2623, 2619, 2614, 2611, 2608, 2603, 2599, 2596, 2592, 2592, 2589, 2588, 2584, 2583, 2582, 2582, 2580, 2579, 2576, 2574, 2573, 2572, 2571, 2570, 2569, 2567, 2567, 2566, 2566, 2565, 2565, 2566, 2566, 2566, 2567, 2567, 2569, 2569, 2568, 2570, 2571, 2571, 2571, 2573, 2574, 2575, 2575, 2577, 2578, 2579, 2580, 2582, 2584, 2586, 2588, 2588, 2590, 2590, 2591, 2592, 2593, 2593, 2596, 2598, 2600, 2604, 2608, 2610, 2612, 2616, 2618, 2621, 2624, 2626, 2628, 2629, 2630, 2632, 2634, 2639, 2642, 2645, 2648, 2650, 2653, 2655, 2657, 2660, 2662, 2666, 2670, 2673, 2678, 2683, 2688, 2694, 2697, 2705, 2708, 2711, 2715, 2722, 2725, 2728, 2734, 2739, 2742, 2746, 2751, 2754, 2756, 2762, 2765, 2769, 2776, 2778, 2786, 2792, 2798, 2801, 2807, 2811, 2814, 2818, 2824, 2829, 2832, 2839, 2845, 2849, 2851, 2853, 2858, 2862, 2867, 2872, 2875, 2880, 2882, 2884, 2889, 2892, 2895, 2900, 2906, 2907, 2910, 2912, 2914, 2918, 2922, 2927, 2930, 2934, 2936, 2938, 2942, 2946, 2948, 2951, 2954, 2956, 2961, 2965, 2970, 2973, 2975, 2980, 2984, 2990, 2995, 2997, 2998, 3001, 3004, 3008, 3012, 3017, 3023, 3024, 3026, 3029, 3031, 3034, 3038, 3042};
        std::array<uint16_t, 512> bVec = {3243, 3240, 3237, 3246, 3249, 3252, 3256, 3260, 3263, 3265, 3271, 3276, 3280, 3283, 3286, 3289, 3292, 3294, 3301, 3303, 3306, 3309, 3314, 3319, 3322, 3329, 3333, 3337, 3339, 3342, 3343, 3347, 3348, 3351, 3356, 3359, 3363, 3366, 3367, 3370, 3372, 3375, 3378, 3379, 3383, 3385, 3387, 3390, 3392, 3395, 3397, 3398, 3400, 3404, 3406, 3408, 3408, 3411, 3414, 3417, 3419, 3421, 3422, 3424, 3426, 3427, 3430, 3431, 3435, 3438, 3440, 3443, 3444, 3448, 3449, 3451, 3454, 3455, 3457, 3460, 3461, 3465, 3466, 3469, 3472, 3473, 3475, 3476, 3478, 3480, 3482, 3483, 3487, 3492, 3493, 3495, 3497, 3498, 3500, 3502, 3504, 3506, 3506, 3509, 3510, 3511, 3512, 3514, 3516, 3518, 3519, 3520, 3521, 3523, 3524, 3525, 3526, 3528, 3529, 3530, 3531, 3533, 3534, 3536, 3536, 3538, 3539, 3539, 3540, 3542, 3543, 3544, 3545, 3546, 3546, 3547, 3548, 3549, 3550, 3551, 3550, 3551, 3552, 3551, 3552, 3553, 3553, 3553, 3554, 3554, 3555, 3556, 3557, 3558, 3558, 3558, 3557, 3558, 3559, 3559, 3559, 3559, 3560, 3560, 3561, 3562, 3562, 3561, 3562, 3563, 3563, 3564, 3564, 3564, 3564, 3565, 3564, 3564, 3565, 3565, 3565, 3565, 3565, 3566, 3565, 3565, 3566, 3566, 3566, 3566, 3565, 3565, 3566, 3566, 3565, 3565, 3565, 3564, 3565, 3564, 3564, 3564, 3564, 3563, 3564, 3563, 3562, 3562, 3561, 3562, 3560, 3560, 3559, 3559, 3559, 3559, 3558, 3558, 3557, 3557, 3556, 3556, 3556, 3556, 3554, 3553, 3553, 3552, 3551, 3550, 3551, 3550, 3549, 3549, 3548, 3547, 3546, 3546, 3544, 3545, 3545, 3543, 3543, 3541, 3541, 3540, 3540, 3538, 3537, 3536, 3534, 3533, 3531, 3530, 3528, 3526, 3524, 3521, 3520, 3518, 3517, 3514, 3508, 3507, 3505, 3502, 3501, 3499, 3496, 3494, 3491, 3489, 3487, 3486, 3484, 3481, 3479, 3477, 3474, 3474, 3471, 3468, 3466, 3462, 3459, 3455, 3453, 3451, 3447, 3445, 3442, 3440, 3438, 3436, 3433, 3431, 3427, 3426, 3424, 3422, 3420, 3418, 3418, 3415, 3412, 3410, 3408, 3405, 3405, 3404, 3402, 3400, 3398, 3396, 3394, 3394, 3392, 3388, 3386, 3384, 3382, 3380, 3377, 3374, 3373, 3371, 3369, 3368, 3361, 3358, 3354, 3349, 3344, 3342, 3339, 3336, 3334, 3332, 3326, 3325, 3323, 3320, 3318, 3315, 3311, 3308, 3306, 3303, 3300, 3297, 3295, 3292, 3288, 3285, 3282, 3278, 3274, 3271, 3268, 3264, 3260, 3257, 3256, 3254, 3252, 3248, 3246, 3243, 3241, 3240, 3238, 3236, 3233, 3231, 3230, 3227, 3225, 3222, 3220, 3217, 3216, 3217, 3214, 3211, 3210, 3209, 3209, 3209, 3205, 3206, 3202, 3199, 3197, 3195, 3193, 3190, 3189, 3187, 3185, 3184, 3182, 3182, 3183, 3181, 3180, 3178, 3175, 3173, 3173, 3172, 3170, 3169, 3170, 3168, 3166, 3166, 3164, 3162, 3161, 3160, 3159, 3157, 3156, 3154, 3153, 3153, 3151, 3150, 3150, 3150, 3148, 3148, 3148, 3147, 3148, 3148, 3146, 3146, 3146, 3146, 3145, 3145, 3145, 3145, 3145, 3146, 3146, 3145, 3146, 3146, 3146, 3146, 3146, 3147, 3148, 3149, 3149, 3149, 3150, 3150, 3152, 3152, 3152, 3153, 3153, 3154, 3155, 3156, 3157, 3158, 3159, 3160, 3160, 3161, 3162, 3164, 3165, 3166, 3167, 3169, 3170, 3170, 3172, 3173, 3174, 3176, 3176, 3178, 3179, 3182, 3183, 3185, 3186, 3190, 3192, 3194, 3197, 3198, 3199, 3201, 3203, 3204, 3207, 3209, 3213, 3215, 3217, 3219, 3220, 3223, 3225, 3229};
        return std::make_unique<OpticalEncoderHandler>(aVec, bVec, A2, A1, -4096.0 * mainEncoderGearRatio);
    }

    static std::unique_ptr<EncoderHandlerInterface> createOutputEncoderHandler()
    {
        std::array<int16_t, 32> compVec = {90, 90, 90, 98, 104, 99, 87, 75, 66, 58, 47, 42, 30, 21, 7, -5, -15, -30, -50, -63, -77, -83, -87, -82, -87, -80, -73, -71, -79, -58, -40, -25};
        return std::make_unique<ResistiveEncoderHandler>(A0, 4096.0 * 200.0 / 360.0, compVec);
    }

    static std::unique_ptr<CurrentController> createCurrentController()
    {
        constexpr float pwmToStallCurrent{1.0};
        constexpr float backEmfCurrent{-1.6693232382199313e-05};

        return std::make_unique<CurrentControlModel>(pwmToStallCurrent, backEmfCurrent, std::make_unique<HBridge2WirePwm>(12, 11));
    }

    class ControlParameters : public SetupConfigHolder::DefaultControlParameters
    {
      public:
        //kalman filter observer vector
        static Eigen::Vector3f getKVector()
        {
            Eigen::Vector3f K;
            K << 2.011661941066074,
                493.0937878670418,
                103.38332707332667;

            return K;
        }

        //system model A matrix
        static Eigen::Matrix3f getAMatrix()
        {
            Eigen::Matrix3f A;
            A << 1.0, 0.0024, 0.0014842527435006162,
                0.0, 0.9819417628930723, 1.2368772862505137,
                0.0, 0.0, 1.0;

            return A;
        }

        //system model invers A matrix
        static Eigen::Matrix3f getAInvMatrix()
        {
            Eigen::Matrix3f AInv;
            AInv << 1.0, -0.0024441368018903024, 0.0015388445512464705,
                0.0, 1.0183903341209595, -1.2596238728112863,
                0.0, 0.0, 1.0;

            return AInv;
        }

        //system model B matrix
        static Eigen::Vector3f getBVector()
        {
            Eigen::Vector3f B;
            B << 0.0014842527435006162,
                1.2368772862505137,
                0.0;

            return B;
        }

        //system model friction comp value
        static float getFrictionComp()
        {
            return 62.79863496418996;
        }
    };
};
// ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

class ConfigHolder
{
public:
    static std::unique_ptr<Communication> getCommunicationHandler()
    {
        auto com = std::make_unique<Communication>(&Serial1, 115200);
        com->addCommunicationNode(
                std::make_unique<DCServoCommunicationHandler>(6, createDCServo<SetupConfigHolder>()));

        return com;
    }
};

#endif
