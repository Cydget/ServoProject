#include "KalmanFilter.h"

KalmanFilter::KalmanFilter()
{
    Eigen::Vector3f xhat0;
    xhat0 << 0, 0, 0;
    reset(xhat0);

    Eigen::Matrix3f AInv;

    A << 1.0, 0.0012, 3.6719999999999994e-05,
        0.0, 0.994, 0.0612,
        0.0, 0.0, 1.0;

    AInv << 1.0, -0.0012072434607645873, 3.7163299798792755e-05,
        0.0, 1.0060362173038229, -0.06156941649899396,
        0.0, 0.0, 1.0;

    B << 3.6719999999999994e-05,
        0.0612,
        0.0;

    //K << 0.09799424580193117,
    //    2.4964409292865963,
    //    0.5652699951929046;

    //K << 0.16531265413057228,
    //    7.247273820257207,
    //    2.5269719748600346;

    //K << 0.1983825910518331,
    //    10.478680647096779,
    //    4.291072093854287;

    //K << 0.32684007265646386,
    //    28.567812385253276,
    //    18.53313095588553;

    //K << 0.3888374995706161,
    //    40.40850366768767,
    //    30.93862171115473;

    //K << 0.4791413260700308,
    //    61.21885215942826,
    //    57.39263621353391;

    //K << 0.5085413648625792,
    //    68.89605951297686,
    //    68.47216577817979;

    //K << 0.622743534980963,
    //    102.86198025189901,
    //    124.93406815357332;

    //K << 1.2879572201280896,
    //    425.2887752180842,
    //    1089.0860221513021;

    K << 1.8229097365190623,
        825.8706566376411,
        3075.4863531454275;


    K = AInv * K;
}

void KalmanFilter::reset(const Eigen::Vector3f& xhat0)
{
    xhat = xhat0;
}

auto KalmanFilter::update(float u, float y) -> decltype(xhat)
{
    xhat += K * (y - xhat[0]);
    Eigen::Vector3f out = xhat;
    xhat = A * xhat + B * u;
    return out;
}
